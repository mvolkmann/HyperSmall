<!DOCTYPE html><html lang="en"><head><meta charset="utf-8"/><meta name="viewport" content="width=device-width, initial-scale=1.0"/><meta name="description" content="The CDN for everything on npm"/><link rel="icon" type="image/jpeg" href="/favicon.jpg"/><link rel="stylesheet" href="https://app.unpkg.com/_assets/styles-D6XP7YEC.css"/><link rel="stylesheet" href="https://app.unpkg.com/_assets/code-light-B2LHUSJR.css"/><script type="importmap">{"imports":{"preact":"https://unpkg.com/preact@10.25.4/dist/preact.module.js","preact/hooks":"https://unpkg.com/preact@10.25.4/hooks/dist/hooks.module.js","preact/jsx-runtime":"https://unpkg.com/preact@10.25.4/jsx-runtime/dist/jsxRuntime.module.js"}}</script><script type="module" src="https://app.unpkg.com/_assets/scripts-5LWG6LQM.js" defer></script><title>UNPKG</title><script async src="https://www.googletagmanager.com/gtag/js?id=UA-140352188-1"></script><script>window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());
gtag('config', 'UA-140352188-1');</script></head><body><header class="border-b border-slate-300 bg-slate-100 text-slate-950"><div class="p-4 mx-auto flex justify-between items-center lg:max-w-screen-xl"><h1 class="text-2xl font-bold inline-block"><a href="https://unpkg.com">UNPKG</a></h1><span class="inline-block h-full"><a href="https://github.com/unpkg"><svg aria-hidden="true" fill="currentColor" viewBox="0 0 24 24" class="w-6 h-6"><path fill-rule="evenodd" d="M12.006 2a9.847 9.847 0 0 0-6.484 2.44 10.32 10.32 0 0 0-3.393 6.17 10.48 10.48 0 0 0 1.317 6.955 10.045 10.045 0 0 0 5.4 4.418c.504.095.683-.223.683-.494 0-.245-.01-1.052-.014-1.908-2.78.62-3.366-1.21-3.366-1.21a2.711 2.711 0 0 0-1.11-1.5c-.907-.637.07-.621.07-.621.317.044.62.163.885.346.266.183.487.426.647.71.135.253.318.476.538.655a2.079 2.079 0 0 0 2.37.196c.045-.52.27-1.006.635-1.37-2.219-.259-4.554-1.138-4.554-5.07a4.022 4.022 0 0 1 1.031-2.75 3.77 3.77 0 0 1 .096-2.713s.839-.275 2.749 1.05a9.26 9.26 0 0 1 5.004 0c1.906-1.325 2.74-1.05 2.74-1.05.37.858.406 1.828.101 2.713a4.017 4.017 0 0 1 1.029 2.75c0 3.939-2.339 4.805-4.564 5.058a2.471 2.471 0 0 1 .679 1.897c0 1.372-.012 2.477-.012 2.814 0 .272.18.592.687.492a10.05 10.05 0 0 0 5.388-4.421 10.473 10.473 0 0 0 1.313-6.948 10.32 10.32 0 0 0-3.39-6.165A9.847 9.847 0 0 0 12.007 2Z" clip-rule="evenodd"></path></svg></a></span></div></header><main class="px-4 pb-24 mx-auto lg:max-w-screen-xl lg:pb-44"><header class="pt-6 pb-4 lg:pt-16"><div class="mb-6 flex justify-between items-center"><h1 class="text-black text-3xl leading-tight font-semibold">alpinejs</h1><div class="text-right w-48"><span>Version: </span><span data-hydrate="{&quot;key&quot;:&quot;VersionSelector&quot;,&quot;props&quot;:{&quot;availableTags&quot;:{&quot;latest&quot;:&quot;3.14.9&quot;},&quot;availableVersions&quot;:[&quot;3.14.9&quot;,&quot;3.14.8&quot;,&quot;3.14.7&quot;,&quot;3.14.6&quot;,&quot;3.14.5&quot;,&quot;3.14.4&quot;,&quot;3.14.3&quot;,&quot;3.14.2&quot;,&quot;3.14.1&quot;,&quot;3.14.0&quot;,&quot;3.13.10&quot;,&quot;3.13.9&quot;,&quot;3.13.8&quot;,&quot;3.13.7&quot;,&quot;3.13.6&quot;,&quot;3.13.5&quot;,&quot;3.13.4&quot;,&quot;3.13.3&quot;,&quot;3.13.2&quot;,&quot;3.13.1&quot;,&quot;3.13.0&quot;,&quot;3.12.3&quot;,&quot;3.12.2&quot;,&quot;3.12.1&quot;,&quot;3.12.0&quot;,&quot;3.11.1&quot;,&quot;3.11.0&quot;,&quot;3.10.5&quot;,&quot;3.10.4&quot;,&quot;3.10.3&quot;,&quot;3.10.2&quot;,&quot;3.10.1&quot;,&quot;3.10.0&quot;,&quot;3.9.6&quot;,&quot;3.9.5&quot;,&quot;3.9.4&quot;,&quot;3.9.3&quot;,&quot;3.9.2&quot;,&quot;3.9.1&quot;,&quot;3.9.0&quot;,&quot;3.8.1&quot;,&quot;3.8.0&quot;,&quot;3.7.1&quot;,&quot;3.7.0&quot;,&quot;3.6.1&quot;,&quot;3.6.0&quot;,&quot;3.5.2&quot;,&quot;3.5.1&quot;,&quot;3.5.0&quot;,&quot;3.4.2&quot;,&quot;3.4.1&quot;,&quot;3.4.0&quot;,&quot;3.3.5&quot;,&quot;3.3.4&quot;,&quot;3.3.3&quot;,&quot;3.3.2&quot;,&quot;3.3.1&quot;,&quot;3.3.0&quot;,&quot;3.2.4&quot;,&quot;3.2.3&quot;,&quot;3.2.2&quot;,&quot;3.2.1&quot;,&quot;3.2.0&quot;,&quot;3.1.1&quot;,&quot;3.1.0&quot;,&quot;3.0.9&quot;,&quot;3.0.8&quot;,&quot;3.0.7&quot;,&quot;3.0.6&quot;,&quot;3.0.5&quot;,&quot;3.0.4&quot;,&quot;3.0.3&quot;,&quot;3.0.2&quot;,&quot;3.0.1&quot;,&quot;3.0.0&quot;,&quot;2.8.2&quot;,&quot;2.8.1&quot;,&quot;2.8.0&quot;,&quot;2.7.3&quot;,&quot;2.7.2&quot;,&quot;2.7.1&quot;,&quot;2.7.0&quot;,&quot;2.6.0&quot;,&quot;2.5.0&quot;,&quot;2.4.1&quot;,&quot;2.4.0&quot;,&quot;2.3.5&quot;,&quot;2.3.4&quot;,&quot;2.3.3&quot;,&quot;2.3.2&quot;,&quot;2.3.1&quot;,&quot;2.3.0&quot;,&quot;2.2.5&quot;,&quot;2.2.4&quot;,&quot;2.2.3&quot;,&quot;2.2.2&quot;,&quot;2.2.1&quot;,&quot;2.2.0&quot;,&quot;2.1.2&quot;,&quot;2.1.1&quot;,&quot;2.1.0&quot;,&quot;2.0.2&quot;,&quot;2.0.1&quot;,&quot;2.0.0&quot;,&quot;1.12.0&quot;,&quot;1.11.1&quot;,&quot;1.11.0&quot;,&quot;1.10.1&quot;,&quot;1.10.0&quot;,&quot;1.9.8&quot;,&quot;1.9.7&quot;,&quot;1.9.6&quot;,&quot;1.9.5&quot;,&quot;1.9.4&quot;,&quot;1.9.3&quot;,&quot;1.9.2&quot;,&quot;1.9.1&quot;,&quot;1.9.0&quot;,&quot;1.8.2&quot;,&quot;1.8.1&quot;,&quot;1.8.0&quot;,&quot;1.7.0&quot;,&quot;1.6.2&quot;,&quot;1.6.1&quot;,&quot;1.6.0&quot;,&quot;1.5.0&quot;,&quot;1.4.0&quot;,&quot;1.3.1&quot;,&quot;1.3.0&quot;,&quot;1.2.0&quot;,&quot;1.1.5&quot;,&quot;1.1.4&quot;,&quot;1.1.3&quot;,&quot;1.1.2&quot;,&quot;1.1.1&quot;,&quot;1.0.0&quot;],&quot;currentVersion&quot;:&quot;1.1.2&quot;,&quot;pathnameFormat&quot;:&quot;/alpinejs@%s/files/dist/alpine.js.map&quot;,&quot;class&quot;:&quot;w-28 p-1 border border-slate-300 bg-slate-100 text-sm&quot;}}"><select name="version" class="w-28 p-1 border border-slate-300 bg-slate-100 text-sm"><optgroup label="Tags"><option value="3.14.9">latest (3.14.9)</option></optgroup><optgroup label="Versions"><option value="3.14.9">3.14.9</option><option value="3.14.8">3.14.8</option><option value="3.14.7">3.14.7</option><option value="3.14.6">3.14.6</option><option value="3.14.5">3.14.5</option><option value="3.14.4">3.14.4</option><option value="3.14.3">3.14.3</option><option value="3.14.2">3.14.2</option><option value="3.14.1">3.14.1</option><option value="3.14.0">3.14.0</option><option value="3.13.10">3.13.10</option><option value="3.13.9">3.13.9</option><option value="3.13.8">3.13.8</option><option value="3.13.7">3.13.7</option><option value="3.13.6">3.13.6</option><option value="3.13.5">3.13.5</option><option value="3.13.4">3.13.4</option><option value="3.13.3">3.13.3</option><option value="3.13.2">3.13.2</option><option value="3.13.1">3.13.1</option><option value="3.13.0">3.13.0</option><option value="3.12.3">3.12.3</option><option value="3.12.2">3.12.2</option><option value="3.12.1">3.12.1</option><option value="3.12.0">3.12.0</option><option value="3.11.1">3.11.1</option><option value="3.11.0">3.11.0</option><option value="3.10.5">3.10.5</option><option value="3.10.4">3.10.4</option><option value="3.10.3">3.10.3</option><option value="3.10.2">3.10.2</option><option value="3.10.1">3.10.1</option><option value="3.10.0">3.10.0</option><option value="3.9.6">3.9.6</option><option value="3.9.5">3.9.5</option><option value="3.9.4">3.9.4</option><option value="3.9.3">3.9.3</option><option value="3.9.2">3.9.2</option><option value="3.9.1">3.9.1</option><option value="3.9.0">3.9.0</option><option value="3.8.1">3.8.1</option><option value="3.8.0">3.8.0</option><option value="3.7.1">3.7.1</option><option value="3.7.0">3.7.0</option><option value="3.6.1">3.6.1</option><option value="3.6.0">3.6.0</option><option value="3.5.2">3.5.2</option><option value="3.5.1">3.5.1</option><option value="3.5.0">3.5.0</option><option value="3.4.2">3.4.2</option><option value="3.4.1">3.4.1</option><option value="3.4.0">3.4.0</option><option value="3.3.5">3.3.5</option><option value="3.3.4">3.3.4</option><option value="3.3.3">3.3.3</option><option value="3.3.2">3.3.2</option><option value="3.3.1">3.3.1</option><option value="3.3.0">3.3.0</option><option value="3.2.4">3.2.4</option><option value="3.2.3">3.2.3</option><option value="3.2.2">3.2.2</option><option value="3.2.1">3.2.1</option><option value="3.2.0">3.2.0</option><option value="3.1.1">3.1.1</option><option value="3.1.0">3.1.0</option><option value="3.0.9">3.0.9</option><option value="3.0.8">3.0.8</option><option value="3.0.7">3.0.7</option><option value="3.0.6">3.0.6</option><option value="3.0.5">3.0.5</option><option value="3.0.4">3.0.4</option><option value="3.0.3">3.0.3</option><option value="3.0.2">3.0.2</option><option value="3.0.1">3.0.1</option><option value="3.0.0">3.0.0</option><option value="2.8.2">2.8.2</option><option value="2.8.1">2.8.1</option><option value="2.8.0">2.8.0</option><option value="2.7.3">2.7.3</option><option value="2.7.2">2.7.2</option><option value="2.7.1">2.7.1</option><option value="2.7.0">2.7.0</option><option value="2.6.0">2.6.0</option><option value="2.5.0">2.5.0</option><option value="2.4.1">2.4.1</option><option value="2.4.0">2.4.0</option><option value="2.3.5">2.3.5</option><option value="2.3.4">2.3.4</option><option value="2.3.3">2.3.3</option><option value="2.3.2">2.3.2</option><option value="2.3.1">2.3.1</option><option value="2.3.0">2.3.0</option><option value="2.2.5">2.2.5</option><option value="2.2.4">2.2.4</option><option value="2.2.3">2.2.3</option><option value="2.2.2">2.2.2</option><option value="2.2.1">2.2.1</option><option value="2.2.0">2.2.0</option><option value="2.1.2">2.1.2</option><option value="2.1.1">2.1.1</option><option value="2.1.0">2.1.0</option><option value="2.0.2">2.0.2</option><option value="2.0.1">2.0.1</option><option value="2.0.0">2.0.0</option><option value="1.12.0">1.12.0</option><option value="1.11.1">1.11.1</option><option value="1.11.0">1.11.0</option><option value="1.10.1">1.10.1</option><option value="1.10.0">1.10.0</option><option value="1.9.8">1.9.8</option><option value="1.9.7">1.9.7</option><option value="1.9.6">1.9.6</option><option value="1.9.5">1.9.5</option><option value="1.9.4">1.9.4</option><option value="1.9.3">1.9.3</option><option value="1.9.2">1.9.2</option><option value="1.9.1">1.9.1</option><option value="1.9.0">1.9.0</option><option value="1.8.2">1.8.2</option><option value="1.8.1">1.8.1</option><option value="1.8.0">1.8.0</option><option value="1.7.0">1.7.0</option><option value="1.6.2">1.6.2</option><option value="1.6.1">1.6.1</option><option value="1.6.0">1.6.0</option><option value="1.5.0">1.5.0</option><option value="1.4.0">1.4.0</option><option value="1.3.1">1.3.1</option><option value="1.3.0">1.3.0</option><option value="1.2.0">1.2.0</option><option value="1.1.5">1.1.5</option><option value="1.1.4">1.1.4</option><option value="1.1.3">1.1.3</option><option selected value="1.1.2">1.1.2</option><option value="1.1.1">1.1.1</option><option value="1.0.0">1.0.0</option></optgroup></select></span></div></div><div class="mt-2"><p class="mb-3 leading-tight"><span>Alpine.js offers you the reactive and declarative nature of big frameworks like Vue or React at a much lower cost.</span></p><div class="lg:hidden"><p class="mt-1 text-sm leading-4"><a href="https://github.com/alpinejs/alpine#readme" title="Visit the alpinejs website" class="inline-flex items-center hover:text-slate-950 hover:underline"><svg aria-hidden="true" fill="none" viewBox="0 0 24 24" class="w-6 h-6"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.213 9.787a3.391 3.391 0 0 0-4.795 0l-3.425 3.426a3.39 3.39 0 0 0 4.795 4.794l.321-.304m-.321-4.49a3.39 3.39 0 0 0 4.795 0l3.424-3.426a3.39 3.39 0 0 0-4.794-4.795l-1.028.961"></path></svg><span class="ml-1">github.com/alpinejs/alpine</span></a></p><p class="mt-1 text-sm leading-4"><a href="https://github.com/alpinejs/alpine" title="View the alpinejs repository on GitHub" class="inline-flex items-center hover:text-slate-950 hover:underline"><svg aria-hidden="true" fill="currentColor" viewBox="0 0 24 24" class="w-6 h-6"><path fill-rule="evenodd" d="M12.006 2a9.847 9.847 0 0 0-6.484 2.44 10.32 10.32 0 0 0-3.393 6.17 10.48 10.48 0 0 0 1.317 6.955 10.045 10.045 0 0 0 5.4 4.418c.504.095.683-.223.683-.494 0-.245-.01-1.052-.014-1.908-2.78.62-3.366-1.21-3.366-1.21a2.711 2.711 0 0 0-1.11-1.5c-.907-.637.07-.621.07-.621.317.044.62.163.885.346.266.183.487.426.647.71.135.253.318.476.538.655a2.079 2.079 0 0 0 2.37.196c.045-.52.27-1.006.635-1.37-2.219-.259-4.554-1.138-4.554-5.07a4.022 4.022 0 0 1 1.031-2.75 3.77 3.77 0 0 1 .096-2.713s.839-.275 2.749 1.05a9.26 9.26 0 0 1 5.004 0c1.906-1.325 2.74-1.05 2.74-1.05.37.858.406 1.828.101 2.713a4.017 4.017 0 0 1 1.029 2.75c0 3.939-2.339 4.805-4.564 5.058a2.471 2.471 0 0 1 .679 1.897c0 1.372-.012 2.477-.012 2.814 0 .272.18.592.687.492a10.05 10.05 0 0 0 5.388-4.421 10.473 10.473 0 0 0 1.313-6.948 10.32 10.32 0 0 0-3.39-6.165A9.847 9.847 0 0 0 12.007 2Z" clip-rule="evenodd"></path></svg><span class="ml-1">alpinejs/alpine</span></a></p></div></div></header><nav class="py-2"><span><a href="https://app.unpkg.com/alpinejs@1.1.2" class="text-blue-600 hover:underline">alpinejs</a></span><span> / </span><span><a href="https://app.unpkg.com/alpinejs@1.1.2/files/dist" class="text-blue-600 hover:underline">dist</a></span><span> / </span><span>alpine.js.map</span></nav><div class="p-3 border border-slate-300 bg-slate-100 text-sm flex justify-between select-none"><div class="w-64"><span><span>1 lines </span><span>• </span></span><span>30.3 kB</span></div><div class="hidden flex-grow sm:block text-center">Source Map (JSON)</div><div class="w-64 hidden sm:block text-right"><a href="https://unpkg.com/alpinejs@1.1.2/dist/alpine.js.map" class="py-1 px-2 border border-slate-300 bg-slate-100 hover:bg-slate-200 rounded-sm">View Raw</a></div></div><div data-hydrate="{&quot;key&quot;:&quot;CodeViewer&quot;,&quot;props&quot;:{&quot;html&quot;:&quot;{&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;version&amp;quot;&lt;/span>:&lt;span class=\&quot;hljs-number\&quot;>3&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;file&amp;quot;&lt;/span>:&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;alpine.js&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;sources&amp;quot;&lt;/span>:[&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;../src/utils.js&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;../src/component.js&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;../src/index.js&amp;quot;&lt;/span>],&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;sourcesContent&amp;quot;&lt;/span>:[&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>// Thanks @stimulus:&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>// https://github.com/stimulusjs/stimulus/blob/master/packages/%40stimulus/core/src/application.ts&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>export function domReady() {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    return new Promise(resolve =&amp;gt; {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        if (document.readyState == &lt;span class=\&quot;hljs-subst\&quot;>\\&amp;quot;&lt;/span>loading&lt;span class=\&quot;hljs-subst\&quot;>\\&amp;quot;&lt;/span>) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            document.addEventListener(&lt;span class=\&quot;hljs-subst\&quot;>\\&amp;quot;&lt;/span>DOMContentLoaded&lt;span class=\&quot;hljs-subst\&quot;>\\&amp;quot;&lt;/span>, resolve)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        } else {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            resolve()&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        }&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    })&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>}&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>export function isTesting() {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    return navigator.userAgent, navigator.userAgent.includes(&lt;span class=\&quot;hljs-subst\&quot;>\\&amp;quot;&lt;/span>Node.js&lt;span class=\&quot;hljs-subst\&quot;>\\&amp;quot;&lt;/span>)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        || navigator.userAgent.includes(&lt;span class=\&quot;hljs-subst\&quot;>\\&amp;quot;&lt;/span>jsdom&lt;span class=\&quot;hljs-subst\&quot;>\\&amp;quot;&lt;/span>)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>}&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>export function kebabCase(subject) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    return subject.replace(/([a-z])([A-Z])/g, &amp;#x27;$1-$2&amp;#x27;).replace(/[_&lt;span class=\&quot;hljs-subst\&quot;>\\\\&lt;/span>s]/, &amp;#x27;-&amp;#x27;).toLowerCase()&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>}&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>export function walkSkippingNestedComponents(el, callback, isRoot = true) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    if (el.hasAttribute(&amp;#x27;x-data&amp;#x27;) &amp;amp;&amp;amp; ! isRoot) return&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    callback(el)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    let node = el.firstElementChild&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    while (node) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        walkSkippingNestedComponents(node, callback, false)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        node = node.nextElementSibling&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    }&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>}&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>export function debounce(func, wait, immediate) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    var timeout;&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    return function () {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        var context = this, args = arguments;&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        var later = function () {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            timeout = null;&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            if (!immediate) func.apply(context, args);&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        };&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        var callNow = immediate &amp;amp;&amp;amp; !timeout;&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        clearTimeout(timeout);&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        timeout = setTimeout(later, wait);&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        if (callNow) func.apply(context, args);&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    };&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>};&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>export function onlyUnique(value, index, self) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    return self.indexOf(value) === index;&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>}&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>export function saferEval(expression, dataContext, additionalHelperVariables = {}) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    return (new Function([&amp;#x27;$data&amp;#x27;, ...Object.keys(additionalHelperVariables)], `var result; with($data) { result = ${expression} }; return result`))(&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        dataContext, ...Object.values(additionalHelperVariables)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    )&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>}&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>export function saferEvalNoReturn(expression, dataContext, additionalHelperVariables = {}) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    return (new Function([&amp;#x27;$data&amp;#x27;, ...Object.keys(additionalHelperVariables)], `with($data) { ${expression} }`))(&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        dataContext, ...Object.values(additionalHelperVariables)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    )&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>}&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>export function isXAttr(attr) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    const xAttrRE = /x-(on|bind|data|text|model|if|show|cloak|ref)/&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    return xAttrRE.test(attr.name)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>}&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>export function getXAttrs(el, type) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    return Array.from(el.attributes)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        .filter(isXAttr)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        .map(attr =&amp;gt; {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            const typeMatch = attr.name.match(/x-(on|bind|data|text|model|if|show|cloak|ref)/)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            const valueMatch = attr.name.match(/:([a-zA-Z&lt;span class=\&quot;hljs-subst\&quot;>\\\\&lt;/span>-]+)/)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            const modifiers = attr.name.match(/&lt;span class=\&quot;hljs-subst\&quot;>\\\\&lt;/span>.[^.&lt;span class=\&quot;hljs-subst\&quot;>\\\\&lt;/span>]]+(?=[^&lt;span class=\&quot;hljs-subst\&quot;>\\\\&lt;/span>]]*$)/g) || []&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            return {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                type: typeMatch ? typeMatch[1] : null,&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                value: valueMatch ? valueMatch[1] : null,&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                modifiers: modifiers.map(i =&amp;gt; i.replace(&amp;#x27;.&amp;#x27;, &amp;#x27;&amp;#x27;)),&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                expression: attr.value,&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            }&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        })&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        .filter(i =&amp;gt; {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            // If no type is passed in for filtering, bypassfilter&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            if (! type) return true&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            return i.type === name&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        })&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>}&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;import { walkSkippingNestedComponents, kebabCase, saferEval, saferEvalNoReturn, getXAttrs, debounce } from &amp;#x27;./utils&amp;#x27;&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>export default class Component {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    constructor(el) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        this.el = el&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        const rawData = saferEval(this.el.getAttribute(&amp;#x27;x-data&amp;#x27;), {})&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        this.data = this.wrapDataInObservable(rawData)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        this.initialize()&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        this.listenForNewElementsToInitialize()&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    }&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    wrapDataInObservable(data) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        this.concernedData = []&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        var self = this&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        const proxyHandler = keyPrefix =&amp;gt; ({&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            set(obj, property, value) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                const propertyName = keyPrefix ? `${keyPrefix}.${property}` : property&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                const setWasSuccessful = Reflect.set(obj, property, value)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                if (self.concernedData.indexOf(propertyName) === -1) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                    self.concernedData.push(propertyName)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                }&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                self.refresh()&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                return setWasSuccessful&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            },&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            get(target, key) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                if (typeof target[key] === &amp;#x27;object&amp;#x27; &amp;amp;&amp;amp; target[key] !== null) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                    const propertyName = keyPrefix ? `${keyPrefix}.${key}` : key&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                    return new Proxy(target[key], proxyHandler(propertyName))&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                }&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                return target[key]&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            }&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        })&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        return new Proxy(data, proxyHandler())&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    }&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    initialize() {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        walkSkippingNestedComponents(this.el, el =&amp;gt; {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            this.initializeElement(el)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        })&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    }&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    initializeElement(el) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        getXAttrs(el).forEach(({ type, value, modifiers, expression }) =&amp;gt; {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            switch (type) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                case &amp;#x27;on&amp;#x27;:&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                    var event = value&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                    this.registerListener(el, event, modifiers, expression)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                    break;&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                case &amp;#x27;model&amp;#x27;:&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                    // If the element we are binding to is a select, a radio, or checkbox&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                    // we&amp;#x27;ll listen for the change event instead of the &lt;span class=\&quot;hljs-subst\&quot;>\\&amp;quot;&lt;/span>input&lt;span class=\&quot;hljs-subst\&quot;>\\&amp;quot;&lt;/span> event.&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                    var event = (el.tagName.toLowerCase() === &amp;#x27;select&amp;#x27;)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                        || [&amp;#x27;checkbox&amp;#x27;, &amp;#x27;radio&amp;#x27;].includes(el.type)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                        || modifiers.includes(&amp;#x27;lazy&amp;#x27;)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                        ? &amp;#x27;change&amp;#x27; : &amp;#x27;input&amp;#x27;&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                    const listenerExpression = this.generateExpressionForXModelListener(el, modifiers, expression)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                    this.registerListener(el, event, modifiers, listenerExpression)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                    var attrName = &amp;#x27;value&amp;#x27;&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                    var { output } = this.evaluateReturnExpression(expression)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                    this.updateAttributeValue(el, attrName, output)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                    break;&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                case &amp;#x27;bind&amp;#x27;:&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                    var attrName = value&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                    var { output } = this.evaluateReturnExpression(expression)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                    this.updateAttributeValue(el, attrName, output)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                    break;&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                case &amp;#x27;text&amp;#x27;:&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                    var { output } = this.evaluateReturnExpression(expression)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                    this.updateTextValue(el, output)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                    break;&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                case &amp;#x27;show&amp;#x27;:&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                    var { output } = this.evaluateReturnExpression(expression)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                    this.updateVisibility(el, output)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                    break;&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                case &amp;#x27;if&amp;#x27;:&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                    var { output } = this.evaluateReturnExpression(expression)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                    this.updatePresence(el, output)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                    break;&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                case &amp;#x27;cloak&amp;#x27;:&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                    el.removeAttribute(&amp;#x27;x-cloak&amp;#x27;)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                    break;&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                default:&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                    break;&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            }&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        })&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    }&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    listenForNewElementsToInitialize() {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        const targetNode = this.el&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        const observerOptions = {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            childList: true,&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            attributes: true,&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            subtree: true,&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        }&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        const observer = new MutationObserver((mutations) =&amp;gt; {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            for (let i=0; i &amp;lt; mutations.length; i++){&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                // Filter out mutations triggered from child components.&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                if (! mutations[i].target.closest(&amp;#x27;[x-data]&amp;#x27;).isSameNode(this.el)) return&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                if (mutations[i].type === &amp;#x27;attributes&amp;#x27; &amp;amp;&amp;amp; mutations[i].attributeName === &amp;#x27;x-data&amp;#x27;) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                    const rawData = saferEval(mutations[i].target.getAttribute(&amp;#x27;x-data&amp;#x27;), {})&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                    Object.keys(rawData).forEach(key =&amp;gt; {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                        if (this.data[key] !== rawData[key]) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                            this.data[key] = rawData[key]&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                        }&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                    })&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                }&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                if (mutations[i].addedNodes.length &amp;gt; 0) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                    mutations[i].addedNodes.forEach(node =&amp;gt; {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                        if (node.nodeType !== 1) return&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                        if (node.matches(&amp;#x27;[x-data]&amp;#x27;)) return&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                        if (getXAttrs(node).length &amp;gt; 0) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                            this.initializeElement(node)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                        }&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                    })&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                }&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>              }&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        })&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        observer.observe(targetNode, observerOptions);&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    }&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    refresh() {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        var self = this&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        const actionByDirectiveType = {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            &amp;#x27;model&amp;#x27;: ({el, output}) =&amp;gt; { self.updateAttributeValue(el, &amp;#x27;value&amp;#x27;, output) },&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            &amp;#x27;bind&amp;#x27;: ({el, attrName, output}) =&amp;gt; { self.updateAttributeValue(el, attrName, output) },&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            &amp;#x27;text&amp;#x27;: ({el, output}) =&amp;gt; { self.updateTextValue(el, output) },&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            &amp;#x27;show&amp;#x27;: ({el, output}) =&amp;gt; { self.updateVisibility(el, output) },&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            &amp;#x27;if&amp;#x27;: ({el, output}) =&amp;gt; { self.updatePresence(el, output) },&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        }&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        const walkThenClearDependancyTracker = (rootEl, callback) =&amp;gt; {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            walkSkippingNestedComponents(rootEl, callback)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            self.concernedData = []&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        }&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        debounce(walkThenClearDependancyTracker, 5)(this.el, function (el) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            getXAttrs(el).forEach(({ type, value, expression }) =&amp;gt; {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                if (! actionByDirectiveType[type]) return&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                var { output, deps } = self.evaluateReturnExpression(expression)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                if (self.concernedData.filter(i =&amp;gt; deps.includes(i)).length &amp;gt; 0) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                    (actionByDirectiveType[type])({ el, attrName: value, output })&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                }&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            })&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        })&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    }&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    generateExpressionForXModelListener(el, modifiers, dataKey) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        var rightSideOfExpression = &amp;#x27;&amp;#x27;&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        if (el.type === &amp;#x27;checkbox&amp;#x27;) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            // If the data we are binding to is an array, toggle it&amp;#x27;s value inside the array.&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            if (Array.isArray(this.data[dataKey])) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                rightSideOfExpression = `$event.target.checked ? ${dataKey}.concat([$event.target.value]) : ${dataKey}.filter(i =&amp;gt; i !== $event.target.value)`&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            } else {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                rightSideOfExpression = `$event.target.checked`&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            }&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        } else if (el.tagName.toLowerCase() === &amp;#x27;select&amp;#x27; &amp;amp;&amp;amp; el.multiple) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            rightSideOfExpression = modifiers.includes(&amp;#x27;number&amp;#x27;)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                ? &amp;#x27;Array.from($event.target.selectedOptions).map(option =&amp;gt; { return parseFloat(option.value || option.text) })&amp;#x27;&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                : &amp;#x27;Array.from($event.target.selectedOptions).map(option =&amp;gt; { return option.value || option.text })&amp;#x27;&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        } else {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            rightSideOfExpression = modifiers.includes(&amp;#x27;number&amp;#x27;)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                ? &amp;#x27;parseFloat($event.target.value)&amp;#x27;&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                : (modifiers.includes(&amp;#x27;trim&amp;#x27;) ? &amp;#x27;$event.target.value.trim()&amp;#x27; : &amp;#x27;$event.target.value&amp;#x27;)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        }&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        if (el.type === &amp;#x27;radio&amp;#x27;) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            // Radio buttons only work properly when they share a name attribute.&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            // People might assume we take care of that for them, because&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            // they already set a shared &lt;span class=\&quot;hljs-subst\&quot;>\\&amp;quot;&lt;/span>x-model&lt;span class=\&quot;hljs-subst\&quot;>\\&amp;quot;&lt;/span> attribute.&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            if (! el.hasAttribute(&amp;#x27;name&amp;#x27;)) el.setAttribute(&amp;#x27;name&amp;#x27;, dataKey)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        }&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        return `${dataKey} = ${rightSideOfExpression}`&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    }&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    registerListener(el, event, modifiers, expression) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        if (modifiers.includes(&amp;#x27;away&amp;#x27;)) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            const handler = e =&amp;gt; {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                // Don&amp;#x27;t do anything if the click came form the element or within it.&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                if (el.contains(e.target)) return&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                // Don&amp;#x27;t do anything if this element isn&amp;#x27;t currently visible.&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                if (el.offsetWidth &amp;lt; 1 &amp;amp;&amp;amp; el.offsetHeight &amp;lt; 1) return&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                // Now that we are sure the element is visible, AND the click&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                // is from outside it, let&amp;#x27;s run the expression.&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                this.runListenerHandler(expression, e)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                if (modifiers.includes(&amp;#x27;once&amp;#x27;)) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                    document.removeEventListener(event, handler)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                }&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            }&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            // Listen for this event at the root level.&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            document.addEventListener(event, handler)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        } else {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            const listenerTarget = modifiers.includes(&amp;#x27;window&amp;#x27;) ? window : el&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            const handler = e =&amp;gt; {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                const modifiersWithoutWindow = modifiers.filter(i =&amp;gt; i !== &amp;#x27;window&amp;#x27;)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                if (event === &amp;#x27;keydown&amp;#x27; &amp;amp;&amp;amp; modifiersWithoutWindow.length &amp;gt; 0 &amp;amp;&amp;amp; ! modifiersWithoutWindow.includes(kebabCase(e.key))) return&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                if (modifiers.includes(&amp;#x27;prevent&amp;#x27;)) e.preventDefault()&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                if (modifiers.includes(&amp;#x27;stop&amp;#x27;)) e.stopPropagation()&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                this.runListenerHandler(expression, e)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                if (modifiers.includes(&amp;#x27;once&amp;#x27;)) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                    listenerTarget.removeEventListener(event, handler)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                }&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            }&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            listenerTarget.addEventListener(event, handler)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        }&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    }&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    runListenerHandler(expression, e) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        this.evaluateCommandExpression(expression, {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            &amp;#x27;$event&amp;#x27;: e,&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            &amp;#x27;$refs&amp;#x27;: this.getRefsProxy(),&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        })&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    }&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    evaluateReturnExpression(expression) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        var affectedDataKeys = []&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        const proxyHandler = prefix =&amp;gt; ({&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            get(object, prop) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                // Sometimes non-proxyable values are accessed. These are of type &lt;span class=\&quot;hljs-subst\&quot;>\\&amp;quot;&lt;/span>symbol&lt;span class=\&quot;hljs-subst\&quot;>\\&amp;quot;&lt;/span>.&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                // We can ignore them.&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                if (typeof prop === &amp;#x27;symbol&amp;#x27;) return&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                const propertyName = prefix ? `${prefix}.${prop}` : prop&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                // If we are accessing an object prop, we&amp;#x27;ll make this proxy recursive to build&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                // a nested dependancy key.&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                if (typeof object[prop] === &amp;#x27;object&amp;#x27; &amp;amp;&amp;amp; object[prop] !== null &amp;amp;&amp;amp; ! Array.isArray(object[prop])) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                    return new Proxy(object[prop], proxyHandler(propertyName))&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                }&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                affectedDataKeys.push(propertyName)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                return object[prop]&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            }&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        })&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        const proxiedData = new Proxy(this.data, proxyHandler())&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        const result = saferEval(expression, proxiedData)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        return {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            output: result,&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            deps: affectedDataKeys&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        }&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    }&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    evaluateCommandExpression(expression, extraData) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        saferEvalNoReturn(expression, this.data, extraData)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    }&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    updateTextValue(el, value) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        el.innerText = value&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    }&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    updateVisibility(el, value) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        if (! value) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            el.style.display = &amp;#x27;none&amp;#x27;&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        } else {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            if (el.style.length === 1 &amp;amp;&amp;amp; el.style.display !== &amp;#x27;&amp;#x27;) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                el.removeAttribute(&amp;#x27;style&amp;#x27;)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            } else {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                el.style.removeProperty(&amp;#x27;display&amp;#x27;)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            }&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        }&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    }&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    updatePresence(el, expressionResult) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        if (el.nodeName.toLowerCase() !== &amp;#x27;template&amp;#x27;) console.warn(`Alpine: [x-if] directive should only be added to &amp;lt;template&amp;gt; tags.`)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        const elementHasAlreadyBeenAdded = el.nextElementSibling &amp;amp;&amp;amp; el.nextElementSibling.__x_inserted_me === true&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        if (expressionResult &amp;amp;&amp;amp; ! elementHasAlreadyBeenAdded) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            const clone = document.importNode(el.content, true);&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            el.parentElement.insertBefore(clone, el.nextElementSibling)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            el.nextElementSibling.__x_inserted_me = true&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        } else if (! expressionResult &amp;amp;&amp;amp; elementHasAlreadyBeenAdded) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            el.nextElementSibling.remove()&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        }&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    }&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    updateAttributeValue(el, attrName, value) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        if (attrName === &amp;#x27;value&amp;#x27;) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            if (el.type === &amp;#x27;radio&amp;#x27;) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                el.checked = el.value == value&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            } else if (el.type === &amp;#x27;checkbox&amp;#x27;) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                if (Array.isArray(value)) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                    // I&amp;#x27;m purposely not using Array.includes here because it&amp;#x27;s&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                    // strict, and because of Numeric/String mis-casting, I&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                    // want the &lt;span class=\&quot;hljs-subst\&quot;>\\&amp;quot;&lt;/span>includes&lt;span class=\&quot;hljs-subst\&quot;>\\&amp;quot;&lt;/span> to be &lt;span class=\&quot;hljs-subst\&quot;>\\&amp;quot;&lt;/span>fuzzy&lt;span class=\&quot;hljs-subst\&quot;>\\&amp;quot;&lt;/span>.&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                    let valueFound = false&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                    value.forEach(val =&amp;gt; {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                        if (val == el.value) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                            valueFound = true&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                        }&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                    })&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                    el.checked = valueFound&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                } else {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                    el.checked = !! value&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                }&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            } else if (el.tagName === &amp;#x27;SELECT&amp;#x27;) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                this.updateSelect(el, value)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            } else {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                el.value = value&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            }&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        } else if (attrName === &amp;#x27;class&amp;#x27;) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            if (Array.isArray(value)) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                el.setAttribute(&amp;#x27;class&amp;#x27;, value.join(&amp;#x27; &amp;#x27;))&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            } else {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                // Use the class object syntax that vue uses to toggle them.&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                Object.keys(value).forEach(classNames =&amp;gt; {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                    if (value[classNames]) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                        classNames.split(&amp;#x27; &amp;#x27;).forEach(className =&amp;gt; el.classList.add(className))&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                    } else {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                        classNames.split(&amp;#x27; &amp;#x27;).forEach(className =&amp;gt; el.classList.remove(className))&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                    }&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                })&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            }&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        } else if ([&amp;#x27;disabled&amp;#x27;, &amp;#x27;readonly&amp;#x27;, &amp;#x27;required&amp;#x27;, &amp;#x27;checked&amp;#x27;, &amp;#x27;hidden&amp;#x27;].includes(attrName)) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            // Boolean attributes have to be explicitly added and removed, not just set.&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            if (!! value) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                el.setAttribute(attrName, &amp;#x27;&amp;#x27;)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            } else {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                el.removeAttribute(attrName)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            }&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        } else {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            el.setAttribute(attrName, value)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        }&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    }&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    updateSelect(el, value) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        const arrayWrappedValue = [].concat(value).map(value =&amp;gt; { return value + &amp;#x27;&amp;#x27; })&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        Array.from(el.options).forEach(option =&amp;gt; {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            option.selected = arrayWrappedValue.includes(option.value || option.text)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        })&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    }&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    getRefsProxy() {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        var self = this&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        // One of the goals of this is to not hold elements in memory, but rather re-evaluate&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        // the DOM when the system needs something from it. This way, the framework is flexible and&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        // friendly to outside DOM changes from libraries like Vue/Livewire.&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        // For this reason, I&amp;#x27;m using an &lt;span class=\&quot;hljs-subst\&quot;>\\&amp;quot;&lt;/span>on-demand&lt;span class=\&quot;hljs-subst\&quot;>\\&amp;quot;&lt;/span> proxy to fake a &lt;span class=\&quot;hljs-subst\&quot;>\\&amp;quot;&lt;/span>$refs&lt;span class=\&quot;hljs-subst\&quot;>\\&amp;quot;&lt;/span> object.&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        return new Proxy({}, {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            get(object, property) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                var ref&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                // We can&amp;#x27;t just query the DOM because it&amp;#x27;s hard to filter out refs in&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                // nested components.&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                walkSkippingNestedComponents(self.el, el =&amp;gt; {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                    if (el.hasAttribute(&amp;#x27;x-ref&amp;#x27;) &amp;amp;&amp;amp; el.getAttribute(&amp;#x27;x-ref&amp;#x27;) === property) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                        ref = el&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                    }&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                })&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                return ref&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            }&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        })&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    }&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>}&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;import Component from &amp;#x27;./component&amp;#x27;&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>import { domReady, isTesting } from &amp;#x27;./utils&amp;#x27;&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>const Alpine = {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    start: async function () {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        if (! isTesting()) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            await domReady()&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        }&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        this.discoverComponents(el =&amp;gt; {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            this.initializeComponent(el)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        })&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        // It&amp;#x27;s easier and more performant to just support Turbolinks than listen&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        // to MutationOberserver mutations at the document level.&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        document.addEventListener(&lt;span class=\&quot;hljs-subst\&quot;>\\&amp;quot;&lt;/span>turbolinks:load&lt;span class=\&quot;hljs-subst\&quot;>\\&amp;quot;&lt;/span>, () =&amp;gt; {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            this.discoverUninitializedComponents(el =&amp;gt; {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                this.initializeComponent(el)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            })&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        })&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        this.listenForNewUninitializedComponentsAtRunTime(el =&amp;gt; {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            this.initializeComponent(el)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        })&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    },&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    discoverComponents: function (callback) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        const rootEls = document.querySelectorAll(&amp;#x27;[x-data]&amp;#x27;);&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        rootEls.forEach(rootEl =&amp;gt; {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            callback(rootEl)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        })&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    },&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    discoverUninitializedComponents: function (callback) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        const rootEls = document.querySelectorAll(&amp;#x27;[x-data]&amp;#x27;);&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        Array.from(rootEls)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            .filter(el =&amp;gt; el.__x === undefined)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            .forEach(rootEl =&amp;gt; {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                callback(rootEl)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            })&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    },&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    listenForNewUninitializedComponentsAtRunTime: function (callback) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        const targetNode = document.querySelector(&amp;#x27;body&amp;#x27;);&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        const observerOptions = {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            childList: true,&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            attributes: true,&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            subtree: true,&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        }&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        const observer = new MutationObserver((mutations) =&amp;gt; {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>            for (let i=0; i &amp;lt; mutations.length; i++){&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                if (mutations[i].addedNodes.length &amp;gt; 0) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                    mutations[i].addedNodes.forEach(node =&amp;gt; {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                        if (node.nodeType !== 1) return&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                        if (node.matches(&amp;#x27;[x-data]&amp;#x27;)) callback(node)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                    })&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>                }&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>              }&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        })&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        observer.observe(targetNode, observerOptions)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    },&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    initializeComponent: function (el) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>        el.__x = new Component(el)&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    }&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>}&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>if (! isTesting()) {&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    window.Alpine = Alpine&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>    window.Alpine.start()&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>}&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>export default Alpine&lt;span class=\&quot;hljs-subst\&quot;>\\n&lt;/span>&amp;quot;&lt;/span>],&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;names&amp;quot;&lt;/span>:[&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;isTesting&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;navigator&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;userAgent&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;includes&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;walkSkippingNestedComponents&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;el&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;callback&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;isRoot&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;hasAttribute&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;node&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;firstElementChild&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;nextElementSibling&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;saferEval&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;expression&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;dataContext&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;additionalHelperVariables&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;Function&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;Object&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;keys&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;values&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;isXAttr&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;attr&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;test&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;name&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;getXAttrs&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;type&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;Array&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;from&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;attributes&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;filter&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;map&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;typeMatch&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;match&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;valueMatch&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;modifiers&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;value&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;i&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;replace&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;Component&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;constructor&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;rawData&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;this&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;getAttribute&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;data&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;wrapDataInObservable&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;initialize&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;listenForNewElementsToInitialize&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;concernedData&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;self&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;proxyHandler&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;keyPrefix&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;set&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;obj&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;property&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;propertyName&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;setWasSuccessful&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;Reflect&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;indexOf&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;push&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;refresh&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;get&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;target&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;key&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;Proxy&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;initializeElement&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;forEach&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;ref&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;registerListener&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;event&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;tagName&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;toLowerCase&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;listenerExpression&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;generateExpressionForXModelListener&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;attrName&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;evaluateReturnExpression&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;updateAttributeValue&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;updateTextValue&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;updateVisibility&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;updatePresence&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;removeAttribute&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;targetNode&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;MutationObserver&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;mutations&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;let&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;length&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;closest&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;isSameNode&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;attributeName&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;addedNodes&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;nodeType&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;matches&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;observe&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;func&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;timeout&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;actionByDirectiveType&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;rootEl&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;context&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;args&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;arguments&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;clearTimeout&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;setTimeout&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;apply&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;deps&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;output&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;dataKey&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;rightSideOfExpression&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;isArray&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;multiple&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;setAttribute&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;handler&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;e&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;contains&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;offsetWidth&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;offsetHeight&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;runListenerHandler&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;removeEventListener&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;addEventListener&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;listenerTarget&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;window&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;modifiersWithoutWindow&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;preventDefault&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;stopPropagation&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;evaluateCommandExpression&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;getRefsProxy&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;affectedDataKeys&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;prefix&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;object&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;prop&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;extraData&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;innerText&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;style&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;display&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;removeProperty&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;expressionResult&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;nodeName&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;console&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;warn&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;elementHasAlreadyBeenAdded&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;__x_inserted_me&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;clone&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;document&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;importNode&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;content&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;parentElement&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;insertBefore&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;remove&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;checked&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;valueFound&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;val&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;updateSelect&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;join&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;classNames&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;split&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;className&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;classList&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;add&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;arrayWrappedValue&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;concat&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;options&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;option&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;selected&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;text&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;const&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;Alpine&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;start&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;discoverComponents&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;initializeComponent&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;discoverUninitializedComponents&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;listenForNewUninitializedComponentsAtRunTime&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;Promise&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;resolve&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;readyState&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;querySelectorAll&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;rootEls&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;undefined&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;__x&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;querySelector&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;childList&amp;quot;&lt;/span>,&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;subtree&amp;quot;&lt;/span>],&lt;span class=\&quot;hljs-string\&quot;>&amp;quot;mappings&amp;quot;&lt;/span>:&lt;span class=\&quot;hljs-string\&quot;>&amp;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&amp;quot;&lt;/span>}&quot;,&quot;numLines&quot;:1}}"><div class="flex relative bg-white font-mono text-sm leading-6"><div class="py-4 border-b border-x border-slate-300 bg-slate-100 text-right select-none"><div><div class="relative"><a id="L1" href="#L1" class="inline-block w-full pl-4 sm:pl-6 pr-2 text-slate-600 hover:text-slate-950 outline-none">1</a></div></div></div><div class="py-4 pl-4 pr-6 relative border-b border-r border-slate-300 flex-grow whitespace-pre overflow-x-auto" style="tab-size:2;">{<span class="hljs-string">&quot;version&quot;</span>:<span class="hljs-number">3</span>,<span class="hljs-string">&quot;file&quot;</span>:<span class="hljs-string">&quot;alpine.js&quot;</span>,<span class="hljs-string">&quot;sources&quot;</span>:[<span class="hljs-string">&quot;../src/utils.js&quot;</span>,<span class="hljs-string">&quot;../src/component.js&quot;</span>,<span class="hljs-string">&quot;../src/index.js&quot;</span>],<span class="hljs-string">&quot;sourcesContent&quot;</span>:[<span class="hljs-string">&quot;<span class="hljs-subst">\n</span>// Thanks @stimulus:<span class="hljs-subst">\n</span>// https://github.com/stimulusjs/stimulus/blob/master/packages/%40stimulus/core/src/application.ts<span class="hljs-subst">\n</span>export function domReady() {<span class="hljs-subst">\n</span>    return new Promise(resolve =&gt; {<span class="hljs-subst">\n</span>        if (document.readyState == <span class="hljs-subst">\&quot;</span>loading<span class="hljs-subst">\&quot;</span>) {<span class="hljs-subst">\n</span>            document.addEventListener(<span class="hljs-subst">\&quot;</span>DOMContentLoaded<span class="hljs-subst">\&quot;</span>, resolve)<span class="hljs-subst">\n</span>        } else {<span class="hljs-subst">\n</span>            resolve()<span class="hljs-subst">\n</span>        }<span class="hljs-subst">\n</span>    })<span class="hljs-subst">\n</span>}<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>export function isTesting() {<span class="hljs-subst">\n</span>    return navigator.userAgent, navigator.userAgent.includes(<span class="hljs-subst">\&quot;</span>Node.js<span class="hljs-subst">\&quot;</span>)<span class="hljs-subst">\n</span>        || navigator.userAgent.includes(<span class="hljs-subst">\&quot;</span>jsdom<span class="hljs-subst">\&quot;</span>)<span class="hljs-subst">\n</span>}<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>export function kebabCase(subject) {<span class="hljs-subst">\n</span>    return subject.replace(/([a-z])([A-Z])/g, &#x27;$1-$2&#x27;).replace(/[_<span class="hljs-subst">\\</span>s]/, &#x27;-&#x27;).toLowerCase()<span class="hljs-subst">\n</span>}<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>export function walkSkippingNestedComponents(el, callback, isRoot = true) {<span class="hljs-subst">\n</span>    if (el.hasAttribute(&#x27;x-data&#x27;) &amp;&amp; ! isRoot) return<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>    callback(el)<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>    let node = el.firstElementChild<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>    while (node) {<span class="hljs-subst">\n</span>        walkSkippingNestedComponents(node, callback, false)<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>        node = node.nextElementSibling<span class="hljs-subst">\n</span>    }<span class="hljs-subst">\n</span>}<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>export function debounce(func, wait, immediate) {<span class="hljs-subst">\n</span>    var timeout;<span class="hljs-subst">\n</span>    return function () {<span class="hljs-subst">\n</span>        var context = this, args = arguments;<span class="hljs-subst">\n</span>        var later = function () {<span class="hljs-subst">\n</span>            timeout = null;<span class="hljs-subst">\n</span>            if (!immediate) func.apply(context, args);<span class="hljs-subst">\n</span>        };<span class="hljs-subst">\n</span>        var callNow = immediate &amp;&amp; !timeout;<span class="hljs-subst">\n</span>        clearTimeout(timeout);<span class="hljs-subst">\n</span>        timeout = setTimeout(later, wait);<span class="hljs-subst">\n</span>        if (callNow) func.apply(context, args);<span class="hljs-subst">\n</span>    };<span class="hljs-subst">\n</span>};<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>export function onlyUnique(value, index, self) {<span class="hljs-subst">\n</span>    return self.indexOf(value) === index;<span class="hljs-subst">\n</span>}<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>export function saferEval(expression, dataContext, additionalHelperVariables = {}) {<span class="hljs-subst">\n</span>    return (new Function([&#x27;$data&#x27;, ...Object.keys(additionalHelperVariables)], `var result; with($data) { result = ${expression} }; return result`))(<span class="hljs-subst">\n</span>        dataContext, ...Object.values(additionalHelperVariables)<span class="hljs-subst">\n</span>    )<span class="hljs-subst">\n</span>}<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>export function saferEvalNoReturn(expression, dataContext, additionalHelperVariables = {}) {<span class="hljs-subst">\n</span>    return (new Function([&#x27;$data&#x27;, ...Object.keys(additionalHelperVariables)], `with($data) { ${expression} }`))(<span class="hljs-subst">\n</span>        dataContext, ...Object.values(additionalHelperVariables)<span class="hljs-subst">\n</span>    )<span class="hljs-subst">\n</span>}<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>export function isXAttr(attr) {<span class="hljs-subst">\n</span>    const xAttrRE = /x-(on|bind|data|text|model|if|show|cloak|ref)/<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>    return xAttrRE.test(attr.name)<span class="hljs-subst">\n</span>}<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>export function getXAttrs(el, type) {<span class="hljs-subst">\n</span>    return Array.from(el.attributes)<span class="hljs-subst">\n</span>        .filter(isXAttr)<span class="hljs-subst">\n</span>        .map(attr =&gt; {<span class="hljs-subst">\n</span>            const typeMatch = attr.name.match(/x-(on|bind|data|text|model|if|show|cloak|ref)/)<span class="hljs-subst">\n</span>            const valueMatch = attr.name.match(/:([a-zA-Z<span class="hljs-subst">\\</span>-]+)/)<span class="hljs-subst">\n</span>            const modifiers = attr.name.match(/<span class="hljs-subst">\\</span>.[^.<span class="hljs-subst">\\</span>]]+(?=[^<span class="hljs-subst">\\</span>]]*$)/g) || []<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>            return {<span class="hljs-subst">\n</span>                type: typeMatch ? typeMatch[1] : null,<span class="hljs-subst">\n</span>                value: valueMatch ? valueMatch[1] : null,<span class="hljs-subst">\n</span>                modifiers: modifiers.map(i =&gt; i.replace(&#x27;.&#x27;, &#x27;&#x27;)),<span class="hljs-subst">\n</span>                expression: attr.value,<span class="hljs-subst">\n</span>            }<span class="hljs-subst">\n</span>        })<span class="hljs-subst">\n</span>        .filter(i =&gt; {<span class="hljs-subst">\n</span>            // If no type is passed in for filtering, bypassfilter<span class="hljs-subst">\n</span>            if (! type) return true<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>            return i.type === name<span class="hljs-subst">\n</span>        })<span class="hljs-subst">\n</span>}<span class="hljs-subst">\n</span>&quot;</span>,<span class="hljs-string">&quot;import { walkSkippingNestedComponents, kebabCase, saferEval, saferEvalNoReturn, getXAttrs, debounce } from &#x27;./utils&#x27;<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>export default class Component {<span class="hljs-subst">\n</span>    constructor(el) {<span class="hljs-subst">\n</span>        this.el = el<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>        const rawData = saferEval(this.el.getAttribute(&#x27;x-data&#x27;), {})<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>        this.data = this.wrapDataInObservable(rawData)<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>        this.initialize()<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>        this.listenForNewElementsToInitialize()<span class="hljs-subst">\n</span>    }<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>    wrapDataInObservable(data) {<span class="hljs-subst">\n</span>        this.concernedData = []<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>        var self = this<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>        const proxyHandler = keyPrefix =&gt; ({<span class="hljs-subst">\n</span>            set(obj, property, value) {<span class="hljs-subst">\n</span>                const propertyName = keyPrefix ? `${keyPrefix}.${property}` : property<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>                const setWasSuccessful = Reflect.set(obj, property, value)<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>                if (self.concernedData.indexOf(propertyName) === -1) {<span class="hljs-subst">\n</span>                    self.concernedData.push(propertyName)<span class="hljs-subst">\n</span>                }<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>                self.refresh()<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>                return setWasSuccessful<span class="hljs-subst">\n</span>            },<span class="hljs-subst">\n</span>            get(target, key) {<span class="hljs-subst">\n</span>                if (typeof target[key] === &#x27;object&#x27; &amp;&amp; target[key] !== null) {<span class="hljs-subst">\n</span>                    const propertyName = keyPrefix ? `${keyPrefix}.${key}` : key<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>                    return new Proxy(target[key], proxyHandler(propertyName))<span class="hljs-subst">\n</span>                }<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>                return target[key]<span class="hljs-subst">\n</span>            }<span class="hljs-subst">\n</span>        })<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>        return new Proxy(data, proxyHandler())<span class="hljs-subst">\n</span>    }<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>    initialize() {<span class="hljs-subst">\n</span>        walkSkippingNestedComponents(this.el, el =&gt; {<span class="hljs-subst">\n</span>            this.initializeElement(el)<span class="hljs-subst">\n</span>        })<span class="hljs-subst">\n</span>    }<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>    initializeElement(el) {<span class="hljs-subst">\n</span>        getXAttrs(el).forEach(({ type, value, modifiers, expression }) =&gt; {<span class="hljs-subst">\n</span>            switch (type) {<span class="hljs-subst">\n</span>                case &#x27;on&#x27;:<span class="hljs-subst">\n</span>                    var event = value<span class="hljs-subst">\n</span>                    this.registerListener(el, event, modifiers, expression)<span class="hljs-subst">\n</span>                    break;<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>                case &#x27;model&#x27;:<span class="hljs-subst">\n</span>                    // If the element we are binding to is a select, a radio, or checkbox<span class="hljs-subst">\n</span>                    // we&#x27;ll listen for the change event instead of the <span class="hljs-subst">\&quot;</span>input<span class="hljs-subst">\&quot;</span> event.<span class="hljs-subst">\n</span>                    var event = (el.tagName.toLowerCase() === &#x27;select&#x27;)<span class="hljs-subst">\n</span>                        || [&#x27;checkbox&#x27;, &#x27;radio&#x27;].includes(el.type)<span class="hljs-subst">\n</span>                        || modifiers.includes(&#x27;lazy&#x27;)<span class="hljs-subst">\n</span>                        ? &#x27;change&#x27; : &#x27;input&#x27;<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>                    const listenerExpression = this.generateExpressionForXModelListener(el, modifiers, expression)<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>                    this.registerListener(el, event, modifiers, listenerExpression)<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>                    var attrName = &#x27;value&#x27;<span class="hljs-subst">\n</span>                    var { output } = this.evaluateReturnExpression(expression)<span class="hljs-subst">\n</span>                    this.updateAttributeValue(el, attrName, output)<span class="hljs-subst">\n</span>                    break;<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>                case &#x27;bind&#x27;:<span class="hljs-subst">\n</span>                    var attrName = value<span class="hljs-subst">\n</span>                    var { output } = this.evaluateReturnExpression(expression)<span class="hljs-subst">\n</span>                    this.updateAttributeValue(el, attrName, output)<span class="hljs-subst">\n</span>                    break;<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>                case &#x27;text&#x27;:<span class="hljs-subst">\n</span>                    var { output } = this.evaluateReturnExpression(expression)<span class="hljs-subst">\n</span>                    this.updateTextValue(el, output)<span class="hljs-subst">\n</span>                    break;<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>                case &#x27;show&#x27;:<span class="hljs-subst">\n</span>                    var { output } = this.evaluateReturnExpression(expression)<span class="hljs-subst">\n</span>                    this.updateVisibility(el, output)<span class="hljs-subst">\n</span>                    break;<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>                case &#x27;if&#x27;:<span class="hljs-subst">\n</span>                    var { output } = this.evaluateReturnExpression(expression)<span class="hljs-subst">\n</span>                    this.updatePresence(el, output)<span class="hljs-subst">\n</span>                    break;<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>                case &#x27;cloak&#x27;:<span class="hljs-subst">\n</span>                    el.removeAttribute(&#x27;x-cloak&#x27;)<span class="hljs-subst">\n</span>                    break;<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>                default:<span class="hljs-subst">\n</span>                    break;<span class="hljs-subst">\n</span>            }<span class="hljs-subst">\n</span>        })<span class="hljs-subst">\n</span>    }<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>    listenForNewElementsToInitialize() {<span class="hljs-subst">\n</span>        const targetNode = this.el<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>        const observerOptions = {<span class="hljs-subst">\n</span>            childList: true,<span class="hljs-subst">\n</span>            attributes: true,<span class="hljs-subst">\n</span>            subtree: true,<span class="hljs-subst">\n</span>        }<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>        const observer = new MutationObserver((mutations) =&gt; {<span class="hljs-subst">\n</span>            for (let i=0; i &lt; mutations.length; i++){<span class="hljs-subst">\n</span>                // Filter out mutations triggered from child components.<span class="hljs-subst">\n</span>                if (! mutations[i].target.closest(&#x27;[x-data]&#x27;).isSameNode(this.el)) return<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>                if (mutations[i].type === &#x27;attributes&#x27; &amp;&amp; mutations[i].attributeName === &#x27;x-data&#x27;) {<span class="hljs-subst">\n</span>                    const rawData = saferEval(mutations[i].target.getAttribute(&#x27;x-data&#x27;), {})<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>                    Object.keys(rawData).forEach(key =&gt; {<span class="hljs-subst">\n</span>                        if (this.data[key] !== rawData[key]) {<span class="hljs-subst">\n</span>                            this.data[key] = rawData[key]<span class="hljs-subst">\n</span>                        }<span class="hljs-subst">\n</span>                    })<span class="hljs-subst">\n</span>                }<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>                if (mutations[i].addedNodes.length &gt; 0) {<span class="hljs-subst">\n</span>                    mutations[i].addedNodes.forEach(node =&gt; {<span class="hljs-subst">\n</span>                        if (node.nodeType !== 1) return<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>                        if (node.matches(&#x27;[x-data]&#x27;)) return<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>                        if (getXAttrs(node).length &gt; 0) {<span class="hljs-subst">\n</span>                            this.initializeElement(node)<span class="hljs-subst">\n</span>                        }<span class="hljs-subst">\n</span>                    })<span class="hljs-subst">\n</span>                }<span class="hljs-subst">\n</span>              }<span class="hljs-subst">\n</span>        })<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>        observer.observe(targetNode, observerOptions);<span class="hljs-subst">\n</span>    }<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>    refresh() {<span class="hljs-subst">\n</span>        var self = this<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>        const actionByDirectiveType = {<span class="hljs-subst">\n</span>            &#x27;model&#x27;: ({el, output}) =&gt; { self.updateAttributeValue(el, &#x27;value&#x27;, output) },<span class="hljs-subst">\n</span>            &#x27;bind&#x27;: ({el, attrName, output}) =&gt; { self.updateAttributeValue(el, attrName, output) },<span class="hljs-subst">\n</span>            &#x27;text&#x27;: ({el, output}) =&gt; { self.updateTextValue(el, output) },<span class="hljs-subst">\n</span>            &#x27;show&#x27;: ({el, output}) =&gt; { self.updateVisibility(el, output) },<span class="hljs-subst">\n</span>            &#x27;if&#x27;: ({el, output}) =&gt; { self.updatePresence(el, output) },<span class="hljs-subst">\n</span>        }<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>        const walkThenClearDependancyTracker = (rootEl, callback) =&gt; {<span class="hljs-subst">\n</span>            walkSkippingNestedComponents(rootEl, callback)<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>            self.concernedData = []<span class="hljs-subst">\n</span>        }<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>        debounce(walkThenClearDependancyTracker, 5)(this.el, function (el) {<span class="hljs-subst">\n</span>            getXAttrs(el).forEach(({ type, value, expression }) =&gt; {<span class="hljs-subst">\n</span>                if (! actionByDirectiveType[type]) return<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>                var { output, deps } = self.evaluateReturnExpression(expression)<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>                if (self.concernedData.filter(i =&gt; deps.includes(i)).length &gt; 0) {<span class="hljs-subst">\n</span>                    (actionByDirectiveType[type])({ el, attrName: value, output })<span class="hljs-subst">\n</span>                }<span class="hljs-subst">\n</span>            })<span class="hljs-subst">\n</span>        })<span class="hljs-subst">\n</span>    }<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>    generateExpressionForXModelListener(el, modifiers, dataKey) {<span class="hljs-subst">\n</span>        var rightSideOfExpression = &#x27;&#x27;<span class="hljs-subst">\n</span>        if (el.type === &#x27;checkbox&#x27;) {<span class="hljs-subst">\n</span>            // If the data we are binding to is an array, toggle it&#x27;s value inside the array.<span class="hljs-subst">\n</span>            if (Array.isArray(this.data[dataKey])) {<span class="hljs-subst">\n</span>                rightSideOfExpression = `$event.target.checked ? ${dataKey}.concat([$event.target.value]) : ${dataKey}.filter(i =&gt; i !== $event.target.value)`<span class="hljs-subst">\n</span>            } else {<span class="hljs-subst">\n</span>                rightSideOfExpression = `$event.target.checked`<span class="hljs-subst">\n</span>            }<span class="hljs-subst">\n</span>        } else if (el.tagName.toLowerCase() === &#x27;select&#x27; &amp;&amp; el.multiple) {<span class="hljs-subst">\n</span>            rightSideOfExpression = modifiers.includes(&#x27;number&#x27;)<span class="hljs-subst">\n</span>                ? &#x27;Array.from($event.target.selectedOptions).map(option =&gt; { return parseFloat(option.value || option.text) })&#x27;<span class="hljs-subst">\n</span>                : &#x27;Array.from($event.target.selectedOptions).map(option =&gt; { return option.value || option.text })&#x27;<span class="hljs-subst">\n</span>        } else {<span class="hljs-subst">\n</span>            rightSideOfExpression = modifiers.includes(&#x27;number&#x27;)<span class="hljs-subst">\n</span>                ? &#x27;parseFloat($event.target.value)&#x27;<span class="hljs-subst">\n</span>                : (modifiers.includes(&#x27;trim&#x27;) ? &#x27;$event.target.value.trim()&#x27; : &#x27;$event.target.value&#x27;)<span class="hljs-subst">\n</span>        }<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>        if (el.type === &#x27;radio&#x27;) {<span class="hljs-subst">\n</span>            // Radio buttons only work properly when they share a name attribute.<span class="hljs-subst">\n</span>            // People might assume we take care of that for them, because<span class="hljs-subst">\n</span>            // they already set a shared <span class="hljs-subst">\&quot;</span>x-model<span class="hljs-subst">\&quot;</span> attribute.<span class="hljs-subst">\n</span>            if (! el.hasAttribute(&#x27;name&#x27;)) el.setAttribute(&#x27;name&#x27;, dataKey)<span class="hljs-subst">\n</span>        }<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>        return `${dataKey} = ${rightSideOfExpression}`<span class="hljs-subst">\n</span>    }<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>    registerListener(el, event, modifiers, expression) {<span class="hljs-subst">\n</span>        if (modifiers.includes(&#x27;away&#x27;)) {<span class="hljs-subst">\n</span>            const handler = e =&gt; {<span class="hljs-subst">\n</span>                // Don&#x27;t do anything if the click came form the element or within it.<span class="hljs-subst">\n</span>                if (el.contains(e.target)) return<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>                // Don&#x27;t do anything if this element isn&#x27;t currently visible.<span class="hljs-subst">\n</span>                if (el.offsetWidth &lt; 1 &amp;&amp; el.offsetHeight &lt; 1) return<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>                // Now that we are sure the element is visible, AND the click<span class="hljs-subst">\n</span>                // is from outside it, let&#x27;s run the expression.<span class="hljs-subst">\n</span>                this.runListenerHandler(expression, e)<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>                if (modifiers.includes(&#x27;once&#x27;)) {<span class="hljs-subst">\n</span>                    document.removeEventListener(event, handler)<span class="hljs-subst">\n</span>                }<span class="hljs-subst">\n</span>            }<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>            // Listen for this event at the root level.<span class="hljs-subst">\n</span>            document.addEventListener(event, handler)<span class="hljs-subst">\n</span>        } else {<span class="hljs-subst">\n</span>            const listenerTarget = modifiers.includes(&#x27;window&#x27;) ? window : el<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>            const handler = e =&gt; {<span class="hljs-subst">\n</span>                const modifiersWithoutWindow = modifiers.filter(i =&gt; i !== &#x27;window&#x27;)<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>                if (event === &#x27;keydown&#x27; &amp;&amp; modifiersWithoutWindow.length &gt; 0 &amp;&amp; ! modifiersWithoutWindow.includes(kebabCase(e.key))) return<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>                if (modifiers.includes(&#x27;prevent&#x27;)) e.preventDefault()<span class="hljs-subst">\n</span>                if (modifiers.includes(&#x27;stop&#x27;)) e.stopPropagation()<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>                this.runListenerHandler(expression, e)<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>                if (modifiers.includes(&#x27;once&#x27;)) {<span class="hljs-subst">\n</span>                    listenerTarget.removeEventListener(event, handler)<span class="hljs-subst">\n</span>                }<span class="hljs-subst">\n</span>            }<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>            listenerTarget.addEventListener(event, handler)<span class="hljs-subst">\n</span>        }<span class="hljs-subst">\n</span>    }<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>    runListenerHandler(expression, e) {<span class="hljs-subst">\n</span>        this.evaluateCommandExpression(expression, {<span class="hljs-subst">\n</span>            &#x27;$event&#x27;: e,<span class="hljs-subst">\n</span>            &#x27;$refs&#x27;: this.getRefsProxy(),<span class="hljs-subst">\n</span>        })<span class="hljs-subst">\n</span>    }<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>    evaluateReturnExpression(expression) {<span class="hljs-subst">\n</span>        var affectedDataKeys = []<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>        const proxyHandler = prefix =&gt; ({<span class="hljs-subst">\n</span>            get(object, prop) {<span class="hljs-subst">\n</span>                // Sometimes non-proxyable values are accessed. These are of type <span class="hljs-subst">\&quot;</span>symbol<span class="hljs-subst">\&quot;</span>.<span class="hljs-subst">\n</span>                // We can ignore them.<span class="hljs-subst">\n</span>                if (typeof prop === &#x27;symbol&#x27;) return<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>                const propertyName = prefix ? `${prefix}.${prop}` : prop<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>                // If we are accessing an object prop, we&#x27;ll make this proxy recursive to build<span class="hljs-subst">\n</span>                // a nested dependancy key.<span class="hljs-subst">\n</span>                if (typeof object[prop] === &#x27;object&#x27; &amp;&amp; object[prop] !== null &amp;&amp; ! Array.isArray(object[prop])) {<span class="hljs-subst">\n</span>                    return new Proxy(object[prop], proxyHandler(propertyName))<span class="hljs-subst">\n</span>                }<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>                affectedDataKeys.push(propertyName)<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>                return object[prop]<span class="hljs-subst">\n</span>            }<span class="hljs-subst">\n</span>        })<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>        const proxiedData = new Proxy(this.data, proxyHandler())<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>        const result = saferEval(expression, proxiedData)<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>        return {<span class="hljs-subst">\n</span>            output: result,<span class="hljs-subst">\n</span>            deps: affectedDataKeys<span class="hljs-subst">\n</span>        }<span class="hljs-subst">\n</span>    }<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>    evaluateCommandExpression(expression, extraData) {<span class="hljs-subst">\n</span>        saferEvalNoReturn(expression, this.data, extraData)<span class="hljs-subst">\n</span>    }<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>    updateTextValue(el, value) {<span class="hljs-subst">\n</span>        el.innerText = value<span class="hljs-subst">\n</span>    }<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>    updateVisibility(el, value) {<span class="hljs-subst">\n</span>        if (! value) {<span class="hljs-subst">\n</span>            el.style.display = &#x27;none&#x27;<span class="hljs-subst">\n</span>        } else {<span class="hljs-subst">\n</span>            if (el.style.length === 1 &amp;&amp; el.style.display !== &#x27;&#x27;) {<span class="hljs-subst">\n</span>                el.removeAttribute(&#x27;style&#x27;)<span class="hljs-subst">\n</span>            } else {<span class="hljs-subst">\n</span>                el.style.removeProperty(&#x27;display&#x27;)<span class="hljs-subst">\n</span>            }<span class="hljs-subst">\n</span>        }<span class="hljs-subst">\n</span>    }<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>    updatePresence(el, expressionResult) {<span class="hljs-subst">\n</span>        if (el.nodeName.toLowerCase() !== &#x27;template&#x27;) console.warn(`Alpine: [x-if] directive should only be added to &lt;template&gt; tags.`)<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>        const elementHasAlreadyBeenAdded = el.nextElementSibling &amp;&amp; el.nextElementSibling.__x_inserted_me === true<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>        if (expressionResult &amp;&amp; ! elementHasAlreadyBeenAdded) {<span class="hljs-subst">\n</span>            const clone = document.importNode(el.content, true);<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>            el.parentElement.insertBefore(clone, el.nextElementSibling)<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>            el.nextElementSibling.__x_inserted_me = true<span class="hljs-subst">\n</span>        } else if (! expressionResult &amp;&amp; elementHasAlreadyBeenAdded) {<span class="hljs-subst">\n</span>            el.nextElementSibling.remove()<span class="hljs-subst">\n</span>        }<span class="hljs-subst">\n</span>    }<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>    updateAttributeValue(el, attrName, value) {<span class="hljs-subst">\n</span>        if (attrName === &#x27;value&#x27;) {<span class="hljs-subst">\n</span>            if (el.type === &#x27;radio&#x27;) {<span class="hljs-subst">\n</span>                el.checked = el.value == value<span class="hljs-subst">\n</span>            } else if (el.type === &#x27;checkbox&#x27;) {<span class="hljs-subst">\n</span>                if (Array.isArray(value)) {<span class="hljs-subst">\n</span>                    // I&#x27;m purposely not using Array.includes here because it&#x27;s<span class="hljs-subst">\n</span>                    // strict, and because of Numeric/String mis-casting, I<span class="hljs-subst">\n</span>                    // want the <span class="hljs-subst">\&quot;</span>includes<span class="hljs-subst">\&quot;</span> to be <span class="hljs-subst">\&quot;</span>fuzzy<span class="hljs-subst">\&quot;</span>.<span class="hljs-subst">\n</span>                    let valueFound = false<span class="hljs-subst">\n</span>                    value.forEach(val =&gt; {<span class="hljs-subst">\n</span>                        if (val == el.value) {<span class="hljs-subst">\n</span>                            valueFound = true<span class="hljs-subst">\n</span>                        }<span class="hljs-subst">\n</span>                    })<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>                    el.checked = valueFound<span class="hljs-subst">\n</span>                } else {<span class="hljs-subst">\n</span>                    el.checked = !! value<span class="hljs-subst">\n</span>                }<span class="hljs-subst">\n</span>            } else if (el.tagName === &#x27;SELECT&#x27;) {<span class="hljs-subst">\n</span>                this.updateSelect(el, value)<span class="hljs-subst">\n</span>            } else {<span class="hljs-subst">\n</span>                el.value = value<span class="hljs-subst">\n</span>            }<span class="hljs-subst">\n</span>        } else if (attrName === &#x27;class&#x27;) {<span class="hljs-subst">\n</span>            if (Array.isArray(value)) {<span class="hljs-subst">\n</span>                el.setAttribute(&#x27;class&#x27;, value.join(&#x27; &#x27;))<span class="hljs-subst">\n</span>            } else {<span class="hljs-subst">\n</span>                // Use the class object syntax that vue uses to toggle them.<span class="hljs-subst">\n</span>                Object.keys(value).forEach(classNames =&gt; {<span class="hljs-subst">\n</span>                    if (value[classNames]) {<span class="hljs-subst">\n</span>                        classNames.split(&#x27; &#x27;).forEach(className =&gt; el.classList.add(className))<span class="hljs-subst">\n</span>                    } else {<span class="hljs-subst">\n</span>                        classNames.split(&#x27; &#x27;).forEach(className =&gt; el.classList.remove(className))<span class="hljs-subst">\n</span>                    }<span class="hljs-subst">\n</span>                })<span class="hljs-subst">\n</span>            }<span class="hljs-subst">\n</span>        } else if ([&#x27;disabled&#x27;, &#x27;readonly&#x27;, &#x27;required&#x27;, &#x27;checked&#x27;, &#x27;hidden&#x27;].includes(attrName)) {<span class="hljs-subst">\n</span>            // Boolean attributes have to be explicitly added and removed, not just set.<span class="hljs-subst">\n</span>            if (!! value) {<span class="hljs-subst">\n</span>                el.setAttribute(attrName, &#x27;&#x27;)<span class="hljs-subst">\n</span>            } else {<span class="hljs-subst">\n</span>                el.removeAttribute(attrName)<span class="hljs-subst">\n</span>            }<span class="hljs-subst">\n</span>        } else {<span class="hljs-subst">\n</span>            el.setAttribute(attrName, value)<span class="hljs-subst">\n</span>        }<span class="hljs-subst">\n</span>    }<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>    updateSelect(el, value) {<span class="hljs-subst">\n</span>        const arrayWrappedValue = [].concat(value).map(value =&gt; { return value + &#x27;&#x27; })<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>        Array.from(el.options).forEach(option =&gt; {<span class="hljs-subst">\n</span>            option.selected = arrayWrappedValue.includes(option.value || option.text)<span class="hljs-subst">\n</span>        })<span class="hljs-subst">\n</span>    }<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>    getRefsProxy() {<span class="hljs-subst">\n</span>        var self = this<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>        // One of the goals of this is to not hold elements in memory, but rather re-evaluate<span class="hljs-subst">\n</span>        // the DOM when the system needs something from it. This way, the framework is flexible and<span class="hljs-subst">\n</span>        // friendly to outside DOM changes from libraries like Vue/Livewire.<span class="hljs-subst">\n</span>        // For this reason, I&#x27;m using an <span class="hljs-subst">\&quot;</span>on-demand<span class="hljs-subst">\&quot;</span> proxy to fake a <span class="hljs-subst">\&quot;</span>$refs<span class="hljs-subst">\&quot;</span> object.<span class="hljs-subst">\n</span>        return new Proxy({}, {<span class="hljs-subst">\n</span>            get(object, property) {<span class="hljs-subst">\n</span>                var ref<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>                // We can&#x27;t just query the DOM because it&#x27;s hard to filter out refs in<span class="hljs-subst">\n</span>                // nested components.<span class="hljs-subst">\n</span>                walkSkippingNestedComponents(self.el, el =&gt; {<span class="hljs-subst">\n</span>                    if (el.hasAttribute(&#x27;x-ref&#x27;) &amp;&amp; el.getAttribute(&#x27;x-ref&#x27;) === property) {<span class="hljs-subst">\n</span>                        ref = el<span class="hljs-subst">\n</span>                    }<span class="hljs-subst">\n</span>                })<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>                return ref<span class="hljs-subst">\n</span>            }<span class="hljs-subst">\n</span>        })<span class="hljs-subst">\n</span>    }<span class="hljs-subst">\n</span>}<span class="hljs-subst">\n</span>&quot;</span>,<span class="hljs-string">&quot;import Component from &#x27;./component&#x27;<span class="hljs-subst">\n</span>import { domReady, isTesting } from &#x27;./utils&#x27;<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>const Alpine = {<span class="hljs-subst">\n</span>    start: async function () {<span class="hljs-subst">\n</span>        if (! isTesting()) {<span class="hljs-subst">\n</span>            await domReady()<span class="hljs-subst">\n</span>        }<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>        this.discoverComponents(el =&gt; {<span class="hljs-subst">\n</span>            this.initializeComponent(el)<span class="hljs-subst">\n</span>        })<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>        // It&#x27;s easier and more performant to just support Turbolinks than listen<span class="hljs-subst">\n</span>        // to MutationOberserver mutations at the document level.<span class="hljs-subst">\n</span>        document.addEventListener(<span class="hljs-subst">\&quot;</span>turbolinks:load<span class="hljs-subst">\&quot;</span>, () =&gt; {<span class="hljs-subst">\n</span>            this.discoverUninitializedComponents(el =&gt; {<span class="hljs-subst">\n</span>                this.initializeComponent(el)<span class="hljs-subst">\n</span>            })<span class="hljs-subst">\n</span>        })<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>        this.listenForNewUninitializedComponentsAtRunTime(el =&gt; {<span class="hljs-subst">\n</span>            this.initializeComponent(el)<span class="hljs-subst">\n</span>        })<span class="hljs-subst">\n</span>    },<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>    discoverComponents: function (callback) {<span class="hljs-subst">\n</span>        const rootEls = document.querySelectorAll(&#x27;[x-data]&#x27;);<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>        rootEls.forEach(rootEl =&gt; {<span class="hljs-subst">\n</span>            callback(rootEl)<span class="hljs-subst">\n</span>        })<span class="hljs-subst">\n</span>    },<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>    discoverUninitializedComponents: function (callback) {<span class="hljs-subst">\n</span>        const rootEls = document.querySelectorAll(&#x27;[x-data]&#x27;);<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>        Array.from(rootEls)<span class="hljs-subst">\n</span>            .filter(el =&gt; el.__x === undefined)<span class="hljs-subst">\n</span>            .forEach(rootEl =&gt; {<span class="hljs-subst">\n</span>                callback(rootEl)<span class="hljs-subst">\n</span>            })<span class="hljs-subst">\n</span>    },<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>    listenForNewUninitializedComponentsAtRunTime: function (callback) {<span class="hljs-subst">\n</span>        const targetNode = document.querySelector(&#x27;body&#x27;);<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>        const observerOptions = {<span class="hljs-subst">\n</span>            childList: true,<span class="hljs-subst">\n</span>            attributes: true,<span class="hljs-subst">\n</span>            subtree: true,<span class="hljs-subst">\n</span>        }<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>        const observer = new MutationObserver((mutations) =&gt; {<span class="hljs-subst">\n</span>            for (let i=0; i &lt; mutations.length; i++){<span class="hljs-subst">\n</span>                if (mutations[i].addedNodes.length &gt; 0) {<span class="hljs-subst">\n</span>                    mutations[i].addedNodes.forEach(node =&gt; {<span class="hljs-subst">\n</span>                        if (node.nodeType !== 1) return<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>                        if (node.matches(&#x27;[x-data]&#x27;)) callback(node)<span class="hljs-subst">\n</span>                    })<span class="hljs-subst">\n</span>                }<span class="hljs-subst">\n</span>              }<span class="hljs-subst">\n</span>        })<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>        observer.observe(targetNode, observerOptions)<span class="hljs-subst">\n</span>    },<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>    initializeComponent: function (el) {<span class="hljs-subst">\n</span>        el.__x = new Component(el)<span class="hljs-subst">\n</span>    }<span class="hljs-subst">\n</span>}<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>if (! isTesting()) {<span class="hljs-subst">\n</span>    window.Alpine = Alpine<span class="hljs-subst">\n</span>    window.Alpine.start()<span class="hljs-subst">\n</span>}<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>export default Alpine<span class="hljs-subst">\n</span>&quot;</span>],<span class="hljs-string">&quot;names&quot;</span>:[<span class="hljs-string">&quot;isTesting&quot;</span>,<span class="hljs-string">&quot;navigator&quot;</span>,<span class="hljs-string">&quot;userAgent&quot;</span>,<span class="hljs-string">&quot;includes&quot;</span>,<span class="hljs-string">&quot;walkSkippingNestedComponents&quot;</span>,<span class="hljs-string">&quot;el&quot;</span>,<span class="hljs-string">&quot;callback&quot;</span>,<span class="hljs-string">&quot;isRoot&quot;</span>,<span class="hljs-string">&quot;hasAttribute&quot;</span>,<span class="hljs-string">&quot;node&quot;</span>,<span class="hljs-string">&quot;firstElementChild&quot;</span>,<span class="hljs-string">&quot;nextElementSibling&quot;</span>,<span class="hljs-string">&quot;saferEval&quot;</span>,<span class="hljs-string">&quot;expression&quot;</span>,<span class="hljs-string">&quot;dataContext&quot;</span>,<span class="hljs-string">&quot;additionalHelperVariables&quot;</span>,<span class="hljs-string">&quot;Function&quot;</span>,<span class="hljs-string">&quot;Object&quot;</span>,<span class="hljs-string">&quot;keys&quot;</span>,<span class="hljs-string">&quot;values&quot;</span>,<span class="hljs-string">&quot;isXAttr&quot;</span>,<span class="hljs-string">&quot;attr&quot;</span>,<span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;getXAttrs&quot;</span>,<span class="hljs-string">&quot;type&quot;</span>,<span class="hljs-string">&quot;Array&quot;</span>,<span class="hljs-string">&quot;from&quot;</span>,<span class="hljs-string">&quot;attributes&quot;</span>,<span class="hljs-string">&quot;filter&quot;</span>,<span class="hljs-string">&quot;map&quot;</span>,<span class="hljs-string">&quot;typeMatch&quot;</span>,<span class="hljs-string">&quot;match&quot;</span>,<span class="hljs-string">&quot;valueMatch&quot;</span>,<span class="hljs-string">&quot;modifiers&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>,<span class="hljs-string">&quot;i&quot;</span>,<span class="hljs-string">&quot;replace&quot;</span>,<span class="hljs-string">&quot;Component&quot;</span>,<span class="hljs-string">&quot;constructor&quot;</span>,<span class="hljs-string">&quot;rawData&quot;</span>,<span class="hljs-string">&quot;this&quot;</span>,<span class="hljs-string">&quot;getAttribute&quot;</span>,<span class="hljs-string">&quot;data&quot;</span>,<span class="hljs-string">&quot;wrapDataInObservable&quot;</span>,<span class="hljs-string">&quot;initialize&quot;</span>,<span class="hljs-string">&quot;listenForNewElementsToInitialize&quot;</span>,<span class="hljs-string">&quot;concernedData&quot;</span>,<span class="hljs-string">&quot;self&quot;</span>,<span class="hljs-string">&quot;proxyHandler&quot;</span>,<span class="hljs-string">&quot;keyPrefix&quot;</span>,<span class="hljs-string">&quot;set&quot;</span>,<span class="hljs-string">&quot;obj&quot;</span>,<span class="hljs-string">&quot;property&quot;</span>,<span class="hljs-string">&quot;propertyName&quot;</span>,<span class="hljs-string">&quot;setWasSuccessful&quot;</span>,<span class="hljs-string">&quot;Reflect&quot;</span>,<span class="hljs-string">&quot;indexOf&quot;</span>,<span class="hljs-string">&quot;push&quot;</span>,<span class="hljs-string">&quot;refresh&quot;</span>,<span class="hljs-string">&quot;get&quot;</span>,<span class="hljs-string">&quot;target&quot;</span>,<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;Proxy&quot;</span>,<span class="hljs-string">&quot;initializeElement&quot;</span>,<span class="hljs-string">&quot;forEach&quot;</span>,<span class="hljs-string">&quot;ref&quot;</span>,<span class="hljs-string">&quot;registerListener&quot;</span>,<span class="hljs-string">&quot;event&quot;</span>,<span class="hljs-string">&quot;tagName&quot;</span>,<span class="hljs-string">&quot;toLowerCase&quot;</span>,<span class="hljs-string">&quot;listenerExpression&quot;</span>,<span class="hljs-string">&quot;generateExpressionForXModelListener&quot;</span>,<span class="hljs-string">&quot;attrName&quot;</span>,<span class="hljs-string">&quot;evaluateReturnExpression&quot;</span>,<span class="hljs-string">&quot;updateAttributeValue&quot;</span>,<span class="hljs-string">&quot;updateTextValue&quot;</span>,<span class="hljs-string">&quot;updateVisibility&quot;</span>,<span class="hljs-string">&quot;updatePresence&quot;</span>,<span class="hljs-string">&quot;removeAttribute&quot;</span>,<span class="hljs-string">&quot;targetNode&quot;</span>,<span class="hljs-string">&quot;MutationObserver&quot;</span>,<span class="hljs-string">&quot;mutations&quot;</span>,<span class="hljs-string">&quot;let&quot;</span>,<span class="hljs-string">&quot;length&quot;</span>,<span class="hljs-string">&quot;closest&quot;</span>,<span class="hljs-string">&quot;isSameNode&quot;</span>,<span class="hljs-string">&quot;attributeName&quot;</span>,<span class="hljs-string">&quot;addedNodes&quot;</span>,<span class="hljs-string">&quot;nodeType&quot;</span>,<span class="hljs-string">&quot;matches&quot;</span>,<span class="hljs-string">&quot;observe&quot;</span>,<span class="hljs-string">&quot;func&quot;</span>,<span class="hljs-string">&quot;timeout&quot;</span>,<span class="hljs-string">&quot;actionByDirectiveType&quot;</span>,<span class="hljs-string">&quot;rootEl&quot;</span>,<span class="hljs-string">&quot;context&quot;</span>,<span class="hljs-string">&quot;args&quot;</span>,<span class="hljs-string">&quot;arguments&quot;</span>,<span class="hljs-string">&quot;clearTimeout&quot;</span>,<span class="hljs-string">&quot;setTimeout&quot;</span>,<span class="hljs-string">&quot;apply&quot;</span>,<span class="hljs-string">&quot;deps&quot;</span>,<span class="hljs-string">&quot;output&quot;</span>,<span class="hljs-string">&quot;dataKey&quot;</span>,<span class="hljs-string">&quot;rightSideOfExpression&quot;</span>,<span class="hljs-string">&quot;isArray&quot;</span>,<span class="hljs-string">&quot;multiple&quot;</span>,<span class="hljs-string">&quot;setAttribute&quot;</span>,<span class="hljs-string">&quot;handler&quot;</span>,<span class="hljs-string">&quot;e&quot;</span>,<span class="hljs-string">&quot;contains&quot;</span>,<span class="hljs-string">&quot;offsetWidth&quot;</span>,<span class="hljs-string">&quot;offsetHeight&quot;</span>,<span class="hljs-string">&quot;runListenerHandler&quot;</span>,<span class="hljs-string">&quot;removeEventListener&quot;</span>,<span class="hljs-string">&quot;addEventListener&quot;</span>,<span class="hljs-string">&quot;listenerTarget&quot;</span>,<span class="hljs-string">&quot;window&quot;</span>,<span class="hljs-string">&quot;modifiersWithoutWindow&quot;</span>,<span class="hljs-string">&quot;preventDefault&quot;</span>,<span class="hljs-string">&quot;stopPropagation&quot;</span>,<span class="hljs-string">&quot;evaluateCommandExpression&quot;</span>,<span class="hljs-string">&quot;getRefsProxy&quot;</span>,<span class="hljs-string">&quot;affectedDataKeys&quot;</span>,<span class="hljs-string">&quot;prefix&quot;</span>,<span class="hljs-string">&quot;object&quot;</span>,<span class="hljs-string">&quot;prop&quot;</span>,<span class="hljs-string">&quot;extraData&quot;</span>,<span class="hljs-string">&quot;innerText&quot;</span>,<span class="hljs-string">&quot;style&quot;</span>,<span class="hljs-string">&quot;display&quot;</span>,<span class="hljs-string">&quot;removeProperty&quot;</span>,<span class="hljs-string">&quot;expressionResult&quot;</span>,<span class="hljs-string">&quot;nodeName&quot;</span>,<span class="hljs-string">&quot;console&quot;</span>,<span class="hljs-string">&quot;warn&quot;</span>,<span class="hljs-string">&quot;elementHasAlreadyBeenAdded&quot;</span>,<span class="hljs-string">&quot;__x_inserted_me&quot;</span>,<span class="hljs-string">&quot;clone&quot;</span>,<span class="hljs-string">&quot;document&quot;</span>,<span class="hljs-string">&quot;importNode&quot;</span>,<span class="hljs-string">&quot;content&quot;</span>,<span class="hljs-string">&quot;parentElement&quot;</span>,<span class="hljs-string">&quot;insertBefore&quot;</span>,<span class="hljs-string">&quot;remove&quot;</span>,<span class="hljs-string">&quot;checked&quot;</span>,<span class="hljs-string">&quot;valueFound&quot;</span>,<span class="hljs-string">&quot;val&quot;</span>,<span class="hljs-string">&quot;updateSelect&quot;</span>,<span class="hljs-string">&quot;join&quot;</span>,<span class="hljs-string">&quot;classNames&quot;</span>,<span class="hljs-string">&quot;split&quot;</span>,<span class="hljs-string">&quot;className&quot;</span>,<span class="hljs-string">&quot;classList&quot;</span>,<span class="hljs-string">&quot;add&quot;</span>,<span class="hljs-string">&quot;arrayWrappedValue&quot;</span>,<span class="hljs-string">&quot;concat&quot;</span>,<span class="hljs-string">&quot;options&quot;</span>,<span class="hljs-string">&quot;option&quot;</span>,<span class="hljs-string">&quot;selected&quot;</span>,<span class="hljs-string">&quot;text&quot;</span>,<span class="hljs-string">&quot;const&quot;</span>,<span class="hljs-string">&quot;Alpine&quot;</span>,<span class="hljs-string">&quot;start&quot;</span>,<span class="hljs-string">&quot;discoverComponents&quot;</span>,<span class="hljs-string">&quot;initializeComponent&quot;</span>,<span class="hljs-string">&quot;discoverUninitializedComponents&quot;</span>,<span class="hljs-string">&quot;listenForNewUninitializedComponentsAtRunTime&quot;</span>,<span class="hljs-string">&quot;Promise&quot;</span>,<span class="hljs-string">&quot;resolve&quot;</span>,<span class="hljs-string">&quot;readyState&quot;</span>,<span class="hljs-string">&quot;querySelectorAll&quot;</span>,<span class="hljs-string">&quot;rootEls&quot;</span>,<span class="hljs-string">&quot;undefined&quot;</span>,<span class="hljs-string">&quot;__x&quot;</span>,<span class="hljs-string">&quot;querySelector&quot;</span>,<span class="hljs-string">&quot;childList&quot;</span>,<span class="hljs-string">&quot;subtree&quot;</span>],<span class="hljs-string">&quot;mappings&quot;</span>:<span class="hljs-string">&quot;AAaA,SAAgBA,WACLC,UAA+BC,UAAUC,SAAS,YAClDF,UAAUC,UAAUC,SAAS,SAOxC,SAAgBC,EAA6BC,EAAIC,EAAUC,sBAAS,IAC5DF,EAAGG,aAAa,WAAeD,GAEnCD,EAASD,WAELI,EAAOJ,EAAGK,kBAEPD,GACHL,EAA6BK,EAAMH,GAAU,GAE7CG,EAAOA,EAAKE,oBAiBnB,SAMeC,EAAUC,EAAYC,EAAaC,yBAA4B,IACnE,IAAIC,SAAS,CAAC,gBAAYC,OAAOC,KAAKH,0CAAmEF,qCAC7GC,UAAgBG,OAAOE,OAAOJ,KAU/B,SAASK,EAAQC,SACJ,gDAEDC,KAAKD,EAAKE,MAGtB,SAASC,EAAUnB,EAAIoB,UACnBC,MAAMC,KAAKtB,EAAGuB,YAChBC,OAAOT,GACPU,aAAIT,OACKU,EAAYV,EAAKE,KAAKS,MAAM,iDAC5BC,EAAaZ,EAAKE,KAAKS,MAAM,kBAC7BE,EAAYb,EAAKE,KAAKS,MAAM,0BAA4B,SAEvD,CACHP,KAAMM,EAAYA,EAAU,GAAK,KACjCI,MAAOF,EAAaA,EAAW,GAAK,KACpCC,UAAWA,EAAUJ,aAAIM,UAAKA,EAAEC,QAAQ,IAAK,MAC7CxB,WAAYQ,EAAKc,SAGxBN,gBAAOO,UAEEX,GAECW,EAAEX,OAASF,OC1Ff,IAAMe,EACjBC,SAAYlC,QACHA,GAAKA,MAEJmC,EAAU5B,EAAU6B,KAAKpC,GAAGqC,aAAa,UAAW,SAErDC,KAAOF,KAAKG,qBAAqBJ,QAEjCK,kBAEAC,oCAGTF,YAAAA,8BAAqBD,QACZI,cAAgB,OAEjBC,EAAOP,KAELQ,WAAeC,UACjBC,aAAIC,EAAKC,EAAUlB,OACTmB,EAAeJ,EAAeA,MAAaG,EAAaA,EAExDE,EAAmBC,QAAQL,IAAIC,EAAKC,EAAUlB,UAEF,IAA9Ca,EAAKD,cAAcU,QAAQH,MACtBP,cAAcW,KAAKJ,GAG5BN,EAAKW,UAEEJ,GAEXK,aAAIC,EAAQC,SACmB,iBAAhBD,EAAOC,IAAqC,OAAhBD,EAAOC,GAGnC,IAAIC,MAAMF,EAAOC,GAAMb,EAFTC,EAAeA,MAAaY,EAAQA,IAKtDD,EAAOC,aAIf,IAAIC,MAAMpB,EAAMM,MAG3BJ,YAAAA,mCACiCJ,KAAKpC,YAAIA,KAC7B2D,kBAAkB3D,MAI/B2D,YAAAA,2BAAkB3D,gBACJA,GAAI4D,iBAASC,iEAEV,OAEIC,iBAAiB9D,EADlB+D,EAAQjC,EACqBD,EAAWrB,aAG3C,YAGGuD,EAAsC,WAA7B/D,EAAGgE,QAAQC,eACjB,CAAC,WAAY,SAASnE,SAASE,EAAGoB,OAClCS,EAAU/B,SAAS,QACpB,SAAW,QAEXoE,EAAqB9B,EAAK+B,oCAAoCnE,EAAI6B,EAAWrB,KAE9EsD,iBAAiB9D,EAAI+D,EAAOlC,EAAWqC,OAExCE,EAAW,UACEhC,EAAKiC,yBAAyB7D,KAC1C8D,qBAAqBtE,EAAIoE,sBAG7B,OACGA,EAAWtC,QACEM,EAAKiC,yBAAyB7D,KAC1C8D,qBAAqBtE,EAAIoE,sBAG7B,aACgBhC,EAAKiC,yBAAyB7D,KAC1C+D,gBAAgBvE,sBAGpB,aACgBoC,EAAKiC,yBAAyB7D,KAC1CgE,iBAAiBxE,sBAGrB,WACgBoC,EAAKiC,yBAAyB7D,KAC1CiE,eAAezE,sBAGnB,QACDA,EAAG0E,gBAAgB,eASnCjC,YAAAA,uDACUkC,EAAavC,KAAKpC,GAQP,IAAI4E,0BAAkBC,OAC9BC,IAAI/C,EAAE,EAAGA,EAAI8C,EAAUE,OAAQhD,IAAI,KAE9B8C,EAAU9C,GAAGyB,OAAOwB,QAAQ,YAAYC,WAAW7C,EAAKpC,IAAK,UAEzC,eAAtB6E,EAAU9C,GAAGX,MAAwD,WAA/ByD,EAAU9C,GAAGmD,cAA4B,KACzE/C,EAAU5B,EAAUsE,EAAU9C,GAAGyB,OAAOnB,aAAa,UAAW,WAE/DxB,KAAKsB,GAASyB,iBAAQH,GACrBrB,EAAKE,KAAKmB,KAAStB,EAAQsB,OACtBnB,KAAKmB,GAAOtB,EAAQsB,MAKjCoB,EAAU9C,GAAGoD,WAAWJ,OAAS,KACvBhD,GAAGoD,WAAWvB,iBAAQxD,GACN,IAAlBA,EAAKgF,WAELhF,EAAKiF,QAAQ,aAEblE,EAAUf,GAAM2E,OAAS,KACpBpB,kBAAkBvD,SAOlCkF,QAAQX,EAnCO,YACT,cACC,WACH,KAmCjBrB,YAAAA,uBDnHqBiC,EACjBC,ECmHI7C,EAAOP,KAELqD,EAAwB,gBAChB5B,KAAwBS,0BAAyB,iCAClDT,KAAkCS,8DAClCT,KAAwBU,8CACxBV,KAAwBW,6CAC1BX,KAAwBY,iCD3HlBc,WC8HuBG,EAAQzF,GAC5CF,EAA6B2F,EAAQzF,GAErC0C,EAAKD,cAAgB,ID/HtB,eACCiD,EAAUvD,KAAMwD,EAAOC,UAM3BC,aAAaN,GACbA,EAAUO,WANE,WACRP,EAAU,KACMD,EAAKS,MAAML,EAASC,IC8HC,KAAGxD,KAAKpC,GAAI,SAAUA,KACjDA,GAAI4D,iBAASC,6BACb4B,EAAsBrE,UAELuB,EAAK0B,2DAExB1B,EAAKD,cAAclB,gBAAOO,UAAKkE,EAAKnG,SAASiC,KAAIgD,OAAS,GACzDU,EAAsBrE,GAAO,IAAEpB,WAAc8B,SAAOoE,UAMrE/B,YAAAA,6CAAoCnE,EAAI6B,EAAWsE,OAC3CC,SAIIA,EAHQ,aAAZpG,EAAGoB,KAECC,MAAMgF,QAAQjE,KAAKE,KAAK6D,IACC,2BAA0BA,sCAA2CA,4CAErE,wBAEO,WAA7BnG,EAAGgE,QAAQC,eAA8BjE,EAAGsG,SAC3BzE,EAAU/B,SAAS,UACrC,8GACA,kGAEkB+B,EAAU/B,SAAS,UACrC,kCACC+B,EAAU/B,SAAS,QAAU,6BAA+B,sBAGvD,UAAZE,EAAGoB,OAIGpB,EAAGG,aAAa,SAASH,EAAGuG,aAAa,OAAQJ,IAGjDA,QAAaC,GAG3BtC,YAAAA,0BAAiB9D,EAAI+D,EAAOlC,EAAWrB,iBAC/BqB,EAAU/B,SAAS,QAAS,KACtB0G,WAAUC,GAERzG,EAAG0G,SAASD,EAAEjD,SAGdxD,EAAG2G,YAAc,GAAK3G,EAAG4G,aAAe,MAIvCC,mBAAmBrG,EAAYiG,GAEhC5E,EAAU/B,SAAS,kBACVgH,oBAAoB/C,EAAOyC,cAKnCO,iBAAiBhD,EAAOyC,OAC9B,KACGQ,EAAiBnF,EAAU/B,SAAS,UAAYmH,OAASjH,EAEzDwG,WAAUC,OACNS,EAAyBrF,EAAUL,gBAAOO,SAAW,WAANA,IAEvC,YAAVgC,GAAuBmD,EAAuBnC,OAAS,IAAOmC,EAAuBpH,SAAmB2G,EAAEhD,IDzN3GzB,QAAQ,kBAAmB,SAASA,QAAQ,QAAS,KAAKiC,iBC2NzDpC,EAAU/B,SAAS,YAAY2G,EAAEU,iBACjCtF,EAAU/B,SAAS,SAAS2G,EAAEW,oBAE7BP,mBAAmBrG,EAAYiG,GAEhC5E,EAAU/B,SAAS,WACJgH,oBAAoB/C,EAAOyC,OAInCO,iBAAiBhD,EAAOyC,KAI/CK,YAAAA,4BAAmBrG,EAAYiG,QACtBY,0BAA0B7G,EAAY,QAC7BiG,QACDrE,KAAKkF,kBAItBjD,YAAAA,kCAAyB7D,OACjB+G,EAAmB,GAEjB3E,WAAe4E,UACjBjE,aAAIkE,EAAQC,MAGY,iBAATA,OAELzE,EAAeuE,EAAYA,MAAUE,EAASA,QAIxB,iBAAjBD,EAAOC,IAAuC,OAAjBD,EAAOC,IAAoBrG,MAAMgF,QAAQoB,EAAOC,KAIxFH,EAAiBlE,KAAKJ,GAEfwE,EAAOC,IALH,IAAIhE,MAAM+D,EAAOC,GAAO9E,EAAaK,cAajD,QAFQ1C,EAAUC,EAFL,IAAIkD,MAAMtB,KAAKE,KAAMM,WAM/B2E,IAIdF,YAAAA,mCAA0B7G,EAAYmH,IDvO1C,SAAkCnH,EAAYC,EAAaC,kBAA4B,IAC3E,IAAIC,SAAS,CAAC,gBAAYC,OAAOC,KAAKH,qBAA8CF,sBACxFC,UAAgBG,OAAOE,OAAOJ,MCsOZF,EAAY4B,KAAKE,KAAMqF,IAG7CpD,YAAAA,yBAAgBvE,EAAI8B,GAChB9B,EAAG4H,UAAY9F,GAGnB0C,YAAAA,0BAAiBxE,EAAI8B,GACXA,EAGsB,IAApB9B,EAAG6H,MAAM9C,QAAqC,KAArB/E,EAAG6H,MAAMC,QAClC9H,EAAG0E,gBAAgB,WAEhBmD,MAAME,eAAe,WAL5B/H,EAAG6H,MAAMC,QAAU,QAU3BrD,YAAAA,wBAAezE,EAAIgI,GACmB,aAA9BhI,EAAGiI,SAAShE,eAA8BiE,QAAQC,KAAM,yEAEtDC,EAA6BpI,EAAGM,qBAAgE,IAA1CN,EAAGM,mBAAmB+H,mBAE9EL,IAAsBI,EAA4B,KAC5CE,EAAQC,SAASC,WAAWxI,EAAGyI,SAAS,GAE9CzI,EAAG0I,cAAcC,aAAaL,EAAOtI,EAAGM,oBAExCN,EAAGM,mBAAmB+H,iBAAkB,OAC/BL,GAAoBI,GAC7BpI,EAAGM,mBAAmBsI,UAI9BtE,YAAAA,8BAAqBtE,EAAIoE,EAAUtC,MACd,UAAbsC,KACgB,UAAZpE,EAAGoB,OACAyH,QAAU7I,EAAG8B,OAASA,OACtB,GAAgB,aAAZ9B,EAAGoB,QACNC,MAAMgF,QAAQvE,GAAQ,KAIlBgH,GAAa,EACjBhH,EAAM8B,iBAAQmF,GACNA,GAAO/I,EAAG8B,WACG,KAIrB9B,EAAG6I,QAAUC,OAEb9I,EAAG6I,UAAa/G,MAEE,WAAf9B,EAAGgE,aACLgF,aAAahJ,EAAI8B,GAEtB9B,EAAG8B,MAAQA,MAEK,UAAbsC,EACH/C,MAAMgF,QAAQvE,GACd9B,EAAGuG,aAAa,QAASzE,EAAMmH,KAAK,aAG7BpI,KAAKiB,GAAO8B,iBAAQsF,GACnBpH,EAAMoH,KACKC,MAAM,KAAKvF,iBAAQwF,UAAapJ,EAAGqJ,UAAUC,IAAIF,OAEjDD,MAAM,KAAKvF,iBAAQwF,UAAapJ,EAAGqJ,UAAUT,OAAOQ,OAIpE,CAAC,WAAY,WAAY,WAAY,UAAW,UAAUtJ,SAASsE,GAEnEtC,IACAyE,aAAanC,EAAU,IAE1BpE,EAAG0E,gBAAgBN,KAGpBmC,aAAanC,EAAUtC,IAIlCkH,YAAAA,sBAAahJ,EAAI8B,OACPyH,EAAoB,GAAGC,OAAO1H,GAAOL,aAAIK,UAAkBA,EAAQ,KAEzET,MAAMC,KAAKtB,EAAGyJ,SAAS7F,iBAAQ8F,GAC3BA,EAAOC,SAAWJ,EAAkBzJ,SAAS4J,EAAO5H,OAAS4H,EAAOE,SAI5EtC,YAAAA,4BACQ3E,EAAOP,YAMJ,IAAIsB,MAAM,GAAI,CACjBH,aAAIkE,EAAQzE,OACJa,WAIyBlB,EAAK3C,YAAIA,GAC9BA,EAAGG,aAAa,UAAYH,EAAGqC,aAAa,WAAaW,MACnDhD,KAIP6D,MClZvBgG,IAAMC,EAAS,CACXC,2BAKI3H,oBAAK4H,4BAAmBhK,KACfiK,oBAAoBjK,KAK7BuI,SAASxB,iBAAiB,+BACjBmD,yCAAgClK,KAC5BiK,oBAAoBjK,SAI5BmK,sDAA6CnK,KACzCiK,oBAAoBjK,0BAjBvBL,2BFDH,IAAIyK,iBAAQC,GACY,WAAvB9B,SAAS+B,WACT/B,SAASxB,iBAAiB,mBAAoBsD,GAE9CA,iHEkBRL,mBAAoB,SAAU/J,GACVsI,SAASgC,iBAAiB,YAElC3G,iBAAQ8B,GACZzF,EAASyF,MAIjBwE,gCAAiC,SAAUjK,OACjCuK,EAAUjC,SAASgC,iBAAiB,YAE1ClJ,MAAMC,KAAKkJ,GACNhJ,gBAAOxB,eAAiByK,IAAXzK,EAAG0K,MAChB9G,iBAAQ8B,GACLzF,EAASyF,MAIrByE,6CAA8C,SAAUlK,OAC9C0E,EAAa4D,SAASoC,cAAc,QAQzB,IAAI/F,0BAAkBC,OAC9BC,IAAI/C,EAAE,EAAGA,EAAI8C,EAAUE,OAAQhD,IAC5B8C,EAAU9C,GAAGoD,WAAWJ,OAAS,GACjCF,EAAU9C,GAAGoD,WAAWvB,iBAAQxD,GACN,IAAlBA,EAAKgF,UAELhF,EAAKiF,QAAQ,aAAapF,EAASG,OAM9CkF,QAAQX,EAlBO,CACpBiG,WAAW,EACXrJ,YAAY,EACZsJ,SAAS,KAkBjBZ,oBAAqB,SAAUjK,GAC3BA,EAAG0K,IAAM,IAAIzI,EAAUjC,KAIzBL,MACFsH,OAAO6C,OAASA,EAChB7C,OAAO6C,OAAOC&quot;</span>}</div></div></div></main></body></html>